<?xml version="1.0" encoding="UTF-8" standalone="yes"?><atom:feed xmlns:atom="http://www.w3.org/2005/Atom"><atom:title>JBoss Developer Recent Posts</atom:title><atom:updated>2018-03-14T09:24:48.424-04:00</atom:updated><atom:id>http://dcp2.jboss.org/v2/rest/feed/?sys_type=blogpost&amp;sortBy=new-create&amp;feed_title=JBoss%20Developer%20Recent%20Posts</atom:id><atom:generator version="2.1.7">Searchisko</atom:generator><atom:entry><atom:title>Final release for Hotrod clients C++ and C# 8.2.0 are out!</atom:title><atom:link href="http://feedproxy.google.com/~r/Infinispan/~3/79EcgHkJycc/final-releases-for-hotrod-clients-c-and.html"/><atom:category scheme="searchisko:content:tags" term="C#"/><atom:category scheme="searchisko:content:tags" term="C++"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="feed_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="final"/><atom:category scheme="searchisko:content:tags" term="minor release"/><atom:category scheme="searchisko:content:tags" term="release"/><atom:updated>2018-03-13T11:52:43-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-final_release_for_hotrod_clients_c_and_c_8_2_0_are_out</atom:id><atom:published>2018-03-13T11:52:00-04:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;span style="font-size: x-large;"&gt;W&lt;/span&gt;e're pleased to announce the availability of the 8.2.0.Final release of the C++ and C# Hotrod clients.&lt;br /&gt;Here is what happened in the 8.2.0 episode:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;C++&lt;/b&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;SASL: PLAIN, MD5, EXTERNAL, GSSAPI (linux only)&lt;/li&gt;&lt;li&gt;Continuous Queries&lt;/li&gt;&lt;li&gt;getAll operation&lt;/li&gt;&lt;li&gt;simplified remote exec API&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;C#&lt;/b&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;SASL: PLAIN, MD5, EXTERNAL&lt;/li&gt;&lt;li&gt;Continuous Queries&lt;/li&gt;&lt;li&gt;GetAll operation&lt;/li&gt;&lt;li&gt;simplified remote exec API &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;You can find more info and even the binaries at the usual places [1][2][3][4]&lt;br /&gt;&lt;br /&gt;In the backstage people are already working on the 8.3.0 episode, you can partecipate expressing your opinion or adding your ideas here [5][6].&lt;br /&gt;&lt;br /&gt;Thank you for reading.&lt;br /&gt;&lt;br /&gt;The Infinispan Team&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="https://issues.jboss.org/projects/HRCPP"&gt;Project Issues&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="https://github.com/infinispan/cpp-client"&gt;C++ Source&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="https://github.com/infinispan/dotnet-client"&gt;C# Source&lt;/a&gt;&lt;br /&gt;[4] &lt;a href="http://infinispan.org/hotrod-clients/"&gt;Download&lt;/a&gt;&lt;br /&gt;[5] &lt;a href="https://issues.jboss.org/browse/HRCPP-452"&gt;C++ Features List for 8.3.0&lt;/a&gt;&lt;br /&gt;[6] &lt;a href="https://issues.jboss.org/browse/HRCPP-453"&gt;C# Features List for 8.3.0&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/79EcgHkJycc" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>We're pleased to announce the availability of the 8.2.0.Final release of the C++ and C# Hotrod clients. Here is what happened in the 8.2.0 episode: C++ SASL: PLAIN, MD5, EXTERNAL, GSSAPI (linux only) Continuous Queries getAll operation simplified remote exec API C# SASL: PLAIN, MD5, EXTERNAL Continuous Queries GetAll operation simplified remote exec API You can find more info and even the binaries...</atom:summary></atom:entry><atom:entry><atom:title>Hibernate Community Newsletter 05/2018</atom:title><atom:link href="http://in.relation.to/2018/03/13/hibernate-community-newsletter-2018-05/"/><atom:category scheme="searchisko:content:tags" term="Discussions"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_hibernate"/><atom:category scheme="searchisko:content:tags" term="feed_name_inrelationto"/><atom:category scheme="searchisko:content:tags" term="Hibernate ORM"/><atom:category scheme="searchisko:content:tags" term="newsletter"/><atom:updated>2018-03-13T10:35:34-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_05_2018</atom:id><atom:published>2018-03-12T20:00:00-04:00</atom:published><atom:author><atom:name>Vlad Mihalcea</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are
      especially relevant to our users.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Bruno Borges wrote an article about
      &lt;a href="https://medium.com/@brunoborges/setting-up-database-servers-for-development-on-mac-os-x-using-docker-b7f2fad056f3"&gt;setting up database servers for development using Docker&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Chang Chao wrote an article about the
      &lt;a href="https://www.changchao.me/?p=782"&gt;Open Session In View Spring Boot implementation causing cache-related problems&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;For our Chinese readers, Yang Chuang wrote an article about using the
      &lt;a href="https://ifrenzyc.github.io/2017/11/16/mysql-streaming/"&gt;MySQL streaming&lt;/a&gt; feature with JDBC.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;If you want to know how to map a JPA entity to a View or SQL query using Hibernate,
      you should read &lt;a href="https://vladmihalcea.com/map-jpa-entity-to-view-or-sql-query-with-hibernate/"&gt;this article&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;When using Oracle, you might want to get the actual execution plan for a given Hibernate JPQL, Criteria API or even
      native SQL query.
      &lt;a href="https://vladmihalcea.com/execution-plan-oracle-hibernate-query-hints/"&gt;This article&lt;/a&gt; explains how you can get the actual execution plan
      when using Oracle.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The &lt;code&gt;hibernate-types&lt;/code&gt; project adds support for custom Hibernate Types like JSON, ARRAY or PostgreSQL Enum.
      The version 2.1.1 adds support for customizing the underlying Jackson &lt;code&gt;ObjectMapper&lt;/code&gt;.
      For more details, you should read
      &lt;a href="https://vladmihalcea.com/hibernate-types-customize-jackson-objectmapper/"&gt;this article&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Thorben Janssen wrote an article about the difference between
      &lt;a href="https://www.thoughts-on-java.org/composition-vs-inheritance-jpa-hibernate/"&gt;Composition and Inheritance&lt;/a&gt;
      when using JPA entities.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="time-to-upgrade"&gt;&lt;a class="anchor" href="#time-to-upgrade"&gt;&lt;/a&gt;Time to upgrade&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;There were many Hibernate project releases since the last newsletter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://in.relation.to/2018/03/08/hibernate-orm-5215-final-release/"&gt;Hibernate ORM 5.2.15&lt;/a&gt; and &lt;a href="http://in.relation.to/2018/02/27/hibernate-orm-5214-final-release/"&gt;Hibernate ORM 5.2.14&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://in.relation.to/2018/02/23/hibernate-search-5-10-0-Beta1/"&gt;Hibernate Search 5.10.0.Beta1&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://in.relation.to/2018/02/20/hibernate-ogm-5-3-Final-released/"&gt;Hibernate OGM 5.3.0.Final&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://in.relation.to/2018/03/08/hibernate-validator-608-final-out/"&gt;Hibernate Validator 6.0.8.Final&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/40115158/how-to-make-hibernate-lock-annotation-work-for-oracle-db/40121788#40121788"&gt;How to make Hibernate &lt;code&gt;@Lock&lt;/code&gt; annotation work for Oracle DB?&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/27968877/how-to-avoid-two-different-threads-read-the-same-rows-from-db-hibernate-and-ora/27974036#27974036"&gt;How to avoid two different threads read the same rows from DB with Hibernate and Oracle&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/30288464/when-should-i-use-joincolumn-or-jointable/30292348#30292348"&gt;When Should I Use &lt;code&gt;@JoinColumn&lt;/code&gt; or &lt;code&gt;@JoinTable&lt;/code&gt;?&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11822302/how-to-join-two-unrelated-entities-using-jpa-and-hibernate/36479380#36479380"&gt;How to join two unrelated entities using JPA and Hibernate&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/query-specified-join-fetching-but-the-owner-of-the-fetched-association-was-not-present-in-the-select-list/258"&gt;Query specified join fetching, but the owner of the fetched association was not present in the select list&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/hibernate-referencedcolumnname/272"&gt;Hibernate throws &lt;code&gt;org.hibernate.TypeMismatchException&lt;/code&gt;: Provided id of the wrong type for class. Expected: class java.lang.Integer, got class java.lang.Long&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/do-i-still-need-to-implement-serializable-when-using-hibernate/287"&gt;Do I still need to implement &lt;code&gt;Serializable&lt;/code&gt; when using Hibernate?&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/entityexistsexception-when-reset-a-arraylist-and-refill-before-merge/301/2"&gt;EntityExistsException when resetting an &lt;code&gt;ArrayList&lt;/code&gt; and refilling it before merge&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Articles Bruno Borges wrote an article about setting up database servers for development using Docker. Chang Chao wrote an article about the Open Session In View Spring Boot implementation causing cache-related problems. For our Chinese readers, ...</atom:summary></atom:entry><atom:entry><atom:title>Hibernate Search 5.9.1.Final was just released</atom:title><atom:link href="http://in.relation.to/2018/03/13/hibernate-search-5-9-1-Final/"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_hibernate"/><atom:category scheme="searchisko:content:tags" term="feed_name_inrelationto"/><atom:category scheme="searchisko:content:tags" term="hibernate search"/><atom:category scheme="searchisko:content:tags" term="releases"/><atom:updated>2018-03-13T10:35:34-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-hibernate_search_5_9_1_final_was_just_released</atom:id><atom:published>2018-03-12T20:00:00-04:00</atom:published><atom:author><atom:name>Guillaume Smet</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We just published 5.9.1.Final, a maintenance release for the 5.9 branch.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This release brings a usability enhancement for our Elasticsearch integration requested by the community (keep them coming!).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;5.9.1.Final only includes 2 changes:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3026"&gt;HSEARCH-3026&lt;/a&gt;:
      It is now possible to define a path prefix for the Elasticsearch cluster.
      Thus, Hibernate Search is now able to connect to clusters with connection URLs such as
      &lt;code&gt;&lt;a href="http://servername/my/elasticsearch/" class="bare"&gt;http://servername/my/elasticsearch/&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3027"&gt;HSEARCH-3027&lt;/a&gt;:
      We fixed a low probability issue in the bootstrap code: it could hang on failure if
      the exception raised was not a &lt;code&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="how-to-get-this-release"&gt;&lt;a class="anchor" href="#how-to-get-this-release"&gt;&lt;/a&gt;How to get this release&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;All the necessary information is available (and updated regularly)
      on &lt;a href="http://hibernate.org/search/releases/5.9/#get-it"&gt;hibernate.org&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;To get in touch, use the following channels:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-search"&gt;hibernate-search tag on Stackoverflow&lt;/a&gt; (usage questions)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-search"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>We just published 5.9.1.Final, a maintenance release for the 5.9 branch. This release brings a usability enhancement for our Elasticsearch integration requested by the community (keep them coming!). What’s new? 5.9.1.Final only includes 2 changes: HSEARCH-3026: It is now possible to define a path prefix for the Elasticsearch cluster. Thus, Hibernate Search is now able to connect to clusters with c...</atom:summary></atom:entry><atom:entry><atom:title>Google Summer of Code 2018</atom:title><atom:link href="http://vertx.io/blog/google-summer-of-code-2018"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_vertx"/><atom:category scheme="searchisko:content:tags" term="feed_name_vertx"/><atom:updated>2018-03-12T20:00:00-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-google_summer_of_code_2018</atom:id><atom:published>2018-03-12T20:00:00-04:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;article&gt;&lt;p&gt;It’s this time of year again!
&lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt; 2018 submission period has just started!&lt;/p&gt;
&lt;h2 id="submit-through-the-eclipse-organization"&gt;Submit through the Eclipse organization&lt;/h2&gt;
&lt;p&gt;This year, the Eclipse Vert.x project participates through the &lt;a href="https://summerofcode.withgoogle.com/organizations/6364590460370944/"&gt;Eclipse organization&lt;/a&gt;.
Make sure to review our &lt;a href="https://wiki.eclipse.org/Google_Summer_of_Code_2018_Ideas#Eclipse_Vert.x"&gt;GSoC 2018 ideas&lt;/a&gt; and to submit before March, 27!&lt;/p&gt;
&lt;h2 id="assessment-application"&gt;Assessment application&lt;/h2&gt;
&lt;p&gt;As we did before, we ask candidates to &lt;a href="https://github.com/tsegismont/vertx-gsoc-2018-qotd"&gt;implement a simple Vert.x application&lt;/a&gt;.
This helps us make sure candidates have a basic understanding of asynchronous programming and the Vert.x toolkit.
&lt;strong&gt;But submit your proposal even if not done with the assessment application!&lt;/strong&gt;
Google will not extend the submission period but we can continue reviewing assessments while evaluating the submitted proposals.&lt;/p&gt;
&lt;h2 id="questions-"&gt;Questions?&lt;/h2&gt;
&lt;p&gt;If you have questions, feel free to ask possible mentors via email or on our &lt;a href="/community"&gt;community channels&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All the details for this year (and ideas from past years) can be found on the &lt;a href="/gsoc"&gt;Vert.x GSoC page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking forward to your proposals!&lt;/p&gt;
&lt;/article&gt;</atom:content><atom:summary>It’s this time of year again! Google Summer of Code 2018 submission period has just started! Submit through the Eclipse organization This year, the Eclipse Vert.x project participates through the Eclipse organization. Make sure to review our GSoC 2018 ideas and to submit before March, 27! Assessment application As we did before, we ask candidates to implement a simple Vert.x application. This help...</atom:summary></atom:entry><atom:entry><atom:title>Announcing WildFly Swarm 2018.3.3</atom:title><atom:link href="https://wildfly-swarm.io/posts/announcing-wildfly-swarm-2018-3-3"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_wildfly_swarm"/><atom:category scheme="searchisko:content:tags" term="feed_name_wildfly_swarm"/><atom:updated>2018-03-09T00:00:00-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-announcing_wildfly_swarm_2018_3_3</atom:id><atom:published>2018-03-09T00:00:00-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;div class="sect1"&gt;
&lt;h2 id="_wildfly_swarm_2018_3_3"&gt;WildFly Swarm 2018.3.3&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Beware the Ides of March, and many failed release attempts!
But we got there!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_what_s_new"&gt;What’s New?&lt;/h3&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MicroProfile Open API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Web" Hollow jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC (Ozark) Fraction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of other fixes!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</atom:content><atom:summary>WildFly Swarm 2018.3.3 Beware the Ides of March, and many failed release attempts! But we got there! What’s New? MicroProfile Open API "Web" Hollow jar MVC (Ozark) Fraction Lots of other fixes!</atom:summary></atom:entry><atom:entry><atom:title>JBoss Weekly 08 March 2018</atom:title><atom:link href="https://developer.jboss.org/blogs/weekly-editorial/2018/03/08/jboss-weekly-08-march-2018"/><atom:category scheme="searchisko:content:tags" term="debezium"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_global"/><atom:category scheme="searchisko:content:tags" term="feed_name_weeklyeditorial"/><atom:category scheme="searchisko:content:tags" term="Hibernate"/><atom:category scheme="searchisko:content:tags" term="hibernate-validator"/><atom:category scheme="searchisko:content:tags" term="infinispan"/><atom:category scheme="searchisko:content:tags" term="microprofile"/><atom:category scheme="searchisko:content:tags" term="weekly_editorial"/><atom:category scheme="searchisko:content:tags" term="wildfly swarm"/><atom:category scheme="searchisko:content:tags" term="wildfy"/><atom:updated>2018-03-08T20:41:58-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-jboss_weekly_08_march_2018</atom:id><atom:published>2018-03-08T20:41:00-05:00</atom:published><atom:author><atom:name>Jason Porter</atom:name></atom:author><atom:content type="html">&lt;!-- [DocumentBodyStart:e6b036b5-a9d7-47ae-89dc-548a12481cda] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;This week, uncharacteristically, has had few releases, but a number of blog posts! Great news for our readers. Welcome to another edition of the JBoss Weekly Editorial!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Three releases happened this past week:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://debezium.io/blog/2018/03/07/debezium-0-7-4-released/" rel="nofollow"&gt;Debezium 0.7.4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/03/08/hibernate-orm-5215-final-release/" rel="nofollow"&gt;Hibernate 5.2.15.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/03/08/hibernate-validator-608-final-out/" rel="nofollow"&gt;Hibernate Validator 6.0.8.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Each of these releases contains a number of bug fixes and features. Hibernate 5.2.15.Final and Hibernate Validator 6.0.8.Final are both drop-in replacements for the previous versions. The update to Debezium should also be a drop in replacement, but blog post doesn&amp;#8217;t specifically call it out.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;The blogs this week are based on three main categories:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;Infinispan&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cloud/Microservices&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;General&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;The Inifinispan Team would like to introduce you all to the HotSwig project. Read more about it at &lt;a class="jive-link-external-small" href="http://blog.infinispan.org/2018/03/a-swig-based-framework-to-build-hotrod.html" rel="nofollow"&gt;http://blog.infinispan.org/2018/03/a-swig-based-framework-to-build-hotrod.html&lt;/a&gt;. HotSwig allows you to build a Hotrod client prototype based on SWIG. This is a great project if you want to use Hotrod with a language which doesn&amp;#8217;t have its own dedicated Hotrod client.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Galder Zamarre&amp;#241;o has some help for those of you using Infinispan in Docker on a Mac. It can be difficult to access Inifinspan due to a known issue with the internal IP address not being accessible externally. If you&amp;#8217;ve fought with this issue, be sure to see the workaround proposed at &lt;a class="jive-link-external-small" href="http://blog.infinispan.org/2018/03/accessing-infinispan-inside-docker-for.html" rel="nofollow"&gt;http://blog.infinispan.org/2018/03/accessing-infinispan-inside-docker-for.html&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;HTTP is very well used and well-known protocol today. Less well known and used is HTTP/2. In his blog post, Sebastian Łaskawiec tackles getting started with Inifinspan and HTTP/2. Read &lt;a class="jive-link-external-small" href="http://blog.infinispan.org/2018/03/rest-with-http2.html" rel="nofollow"&gt;http://blog.infinispan.org/2018/03/rest-with-http2.html&lt;/a&gt; if you&amp;#8217;re interested.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Vinay Bhalerao is starting a series about 3Scale and Identity Management. In this first post, Vinay introduces the use case and some basic details. Head over to the Red Hat Developers blog post for the whole article: &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/03/06/redhat-3scale-identity-management/" rel="nofollow"&gt;https://developers.redhat.com/blog/2018/03/06/redhat-3scale-identity-management/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Antoine Sabot-Durand over on the Red Hat Developers blog introduces you to the &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/03/08/microprofile-fault-tolerance-wildfly-swarm/" rel="nofollow"&gt;Eclipse MicroProfile Fault Tolerance specification and subsequent implementation in Wildfly Swarm&lt;/a&gt;. You may be familiar with Hystrix or Failsafe. The specification provides you with a standard API to use and stay loosely coupled to the third party libraries. It&amp;#8217;s great to see some standardization in this area!&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If you haven&amp;#8217;t heard of Istio, or are curious to learn more, read Don Schenck&amp;#8217;s &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/" rel="nofollow"&gt;blog post introducing Istio&lt;/a&gt;. Don does a great job doing a quick introduction and high-level overview of Istio and service mesh.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Jeff Mesnil expands on how the MicroProfile 1.2 release can be used by Java developers writing microservices on OpenShift. &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/03/05/cloud-native-microprofile-config-healthcheck-openshift/" rel="nofollow"&gt;https://developers.redhat.com/blog/2018/03/05/cloud-native-microprofile-config-healthcheck-openshift/&lt;/a&gt; is decently in-depth and gives you a great starting place to leverage all the latest and greatest from MicroProfile 1.2&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schabell recently launched his new book, Effective Business Process Management with JBoss BPM! He blogged about it over at &lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/03/book-launced-effective-business-process-management-with-jboss-bpm.html" rel="nofollow"&gt;http://www.schabell.org/2018/03/book-launced-effective-business-process-management-with-jboss-bpm.html&lt;/a&gt;. It will be a great addition for anyone getting started or looking for some more information about Business Process Management!&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Wildfly 12 introduced some CLI tools for keystore manipulation. This is great news for anyone tired of trying to do all of that by hand. Our very own Farah Juma recently blogged about the new capabilities over on her blog: &lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6166" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2018/03/02/manipulating-keystores-using-the-cli-in-wildfly-12"&gt;https://developer.jboss.org/people/fjuma/blog/2018/03/02/manipulating-keystores-using-the-cli-in-wildfly-12&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To finish off our week, many of us at Red Hat and also out in the community, are gearing up for Red Hat Summit 2018! Mike Guerrette gives us the rundown on a number of excellent talks and speakers over on the Red Hat Developer Blog: &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/03/07/red-hat-summit-2018-focus-modern-app-development/" rel="nofollow"&gt;https://developers.redhat.com/blog/2018/03/07/red-hat-summit-2018-focus-modern-app-development/&lt;/a&gt;. There are so many good things happening at Red Hat Summit this year! We&amp;#8217;re all looking forward to seeing you there!&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Thanks again for coming back to another edition of the JBoss Weekly Editorial!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:e6b036b5-a9d7-47ae-89dc-548a12481cda] --&gt;</atom:content><atom:summary>This week, uncharacteristically, has had few releases, but a number of blog posts! Great news for our readers. Welcome to another edition of the JBoss Weekly Editorial!   Releases Three releases happened this past week: Debezium 0.7.4 Hibernate 5.2.15.Final Hibernate Validator 6.0.8.Final Each of these releases contains a number of bug fixes and features. Hibernate 5.2.15.Final and Hibernate Valid...</atom:summary></atom:entry><atom:entry><atom:title>Book Launched - Effective Business Process Management with JBoss BPM</atom:title><atom:link href="http://feedproxy.google.com/~r/schabell/jboss/~3/__rvv6i4_pE/book-launced-effective-business-process-management-with-jboss-bpm.html"/><atom:category scheme="searchisko:content:tags" term="AppDev"/><atom:category scheme="searchisko:content:tags" term="Automate"/><atom:category scheme="searchisko:content:tags" term="BPM Suite"/><atom:category scheme="searchisko:content:tags" term="bpmPaaS"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_global"/><atom:category scheme="searchisko:content:tags" term="feed_name_ericschabell"/><atom:category scheme="searchisko:content:tags" term="JBoss"/><atom:category scheme="searchisko:content:tags" term="jBPM"/><atom:category scheme="searchisko:content:tags" term="Publishing"/><atom:updated>2018-03-08T06:10:44-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-book_launched_effective_business_process_management_with_jboss_bpm</atom:id><atom:published>2018-03-08T01:00:00-05:00</atom:published><atom:author><atom:name>Eric D. Schabell</atom:name></atom:author><atom:content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/effective-jboss-bpm" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="547" data-original-width="433" height="320" src="https://1.bp.blogspot.com/-zlzKetxwarw/WqBAN1oT-OI/AAAAAAAAr64/f4iNz-EMuTQYJ9aUIlUanmo4cH8jbPztACLcBGAs/s320/Schabell_JBoss_front1.png" width="252" /&gt;&lt;/a&gt;&lt;/div&gt;Are you interested in an introduction to the concepts of process management (BPM)?&lt;br /&gt;&lt;br /&gt;Do you want to learn how your business can leverage process driven application delivery?&lt;br /&gt;&lt;br /&gt;Are you looking for an easy to understand &lt;a href="http://bit.ly/effective-jboss-bpm" target="_blank"&gt;guide to mastering Red Hat JBoss BPM Suite&lt;/a&gt; tooling?&lt;br /&gt;&lt;br /&gt;Do you want a step-by-step introduction to setting up JBoss BPM Suite, then coverage of practical and important topics like data modeling, designing business rules and processes,&amp;nbsp; detailed real world examples, and tips for testing?&lt;br /&gt;&lt;br /&gt;For the last few years I've been working on putting years of working with JBoss BPM Suite, community projects Drools and jBPM together in one easy to understand book.&lt;br /&gt;&lt;br /&gt;In 2017, Red Hat put the &lt;a href="https://www.redhat.com/en/resources/jboss-in-action-book-chapter" target="_blank"&gt;first chapter online for free&lt;/a&gt; and literally thousands downloaded it starting their journey on the road to delivering process driven application with JBoss BPM Suite. Many of you have reached out over the years to ask about the completion of this book and where you can get it.&lt;br /&gt;&lt;br /&gt;The good news isthat the book is available and Red Hat's providing ebook downloads for free!&lt;br /&gt;&lt;br /&gt;Let's look at how this works, shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="http://bit.ly/effective-jboss-bpm" target="_blank"&gt;Effective Business Process Management with JBoss BPM&lt;/a&gt;&lt;/h3&gt;&lt;a href="http://bit.ly/effective-jboss-bpm" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="628" data-original-width="1200" height="167" src="https://1.bp.blogspot.com/-Vb-Vld_zV6g/WqA_sklWexI/AAAAAAAAr60/yF_A-WE-sQkDLpAKrWQlGZraKYT2g0vCwCEwYBhgL/s320/erics_bpm_book.png" width="320" /&gt;&lt;/a&gt;While writing this book I've tried to share both the process and the chapters as teasers. I've posted an &lt;a href="http://www.schabell.org/2016/07/introducing-business-process-management-with-jboss-bpm.html" target="_blank"&gt;excerpt introducing business process management with JBoss BPM&lt;/a&gt;,&amp;nbsp; &lt;a href="https://medium.com/@eschabell/introducing-business-process-management-5deb7b7b9993" target="_blank"&gt;an introduction to the book on medium.com&lt;/a&gt;, and an excerpt from the chapter on data modeling.&lt;br /&gt;&lt;br /&gt;If you want to browse the articles and explore some of these excerpts, &lt;a href="http://www.schabell.org/search/label/Publishing" target="_blank"&gt;check out the publishing feed&lt;/a&gt; on my site.&lt;br /&gt;&lt;br /&gt;Now for the best part, the Red Hat Developers Program is hosting the &lt;a href="http://bit.ly/effective-jboss-bpm" target="_blank"&gt;option for you to download&lt;/a&gt; a free ebook copy!&lt;br /&gt;&lt;br /&gt;I would like to thank everyone over the years that have helped my knowledge grow around JBoss, JBoss BPM, writing, publishing and managing this final free ebook to help everyone learn how to create and deploy process driving applications using JBoss BPM Suite.&lt;br /&gt;&lt;br /&gt;Feel free to leave a comment, give me feedback through &lt;a href="https://twitter.com/ericschabell" target="_blank"&gt;my social channels&lt;/a&gt; or on &lt;a href="http://www.schabell.org/p/contact.html" target="_blank"&gt;my sites contact form&lt;/a&gt;. I am always happy to chat about process driven applications and anything JBoss!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=__rvv6i4_pE:0d7ESnP93fA:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=__rvv6i4_pE:0d7ESnP93fA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=__rvv6i4_pE:0d7ESnP93fA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=__rvv6i4_pE:0d7ESnP93fA:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=__rvv6i4_pE:0d7ESnP93fA:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/__rvv6i4_pE" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>Are you interested in an introduction to the concepts of process management (BPM)? Do you want to learn how your business can leverage process driven application delivery? Are you looking for an easy to understand guide to mastering Red Hat JBoss BPM Suite tooling? Do you want a step-by-step introduction to setting up JBoss BPM Suite, then coverage of practical and important topics like data model...</atom:summary></atom:entry><atom:entry><atom:title>Creating DDD aggregates with Debezium and Kafka Streams</atom:title><atom:link href="/blog/2018/03/08/creating-ddd-aggregates-with-debezium-and-kafka-streams/"/><atom:category scheme="searchisko:content:tags" term="discussion"/><atom:category scheme="searchisko:content:tags" term="examples"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_debezium"/><atom:category scheme="searchisko:content:tags" term="feed_name_debezium"/><atom:updated>2018-03-12T11:38:49-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-creating_ddd_aggregates_with_debezium_and_kafka_streams</atom:id><atom:published>2018-03-07T19:00:00-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Microservice-based architectures can be considered an industry trend and are thus
      often found in enterprise applications lately. One possible way to keep data
      synchronized across multiple services and their backing data stores is to make us of an approach
      called &lt;a href="https://vladmihalcea.com/a-beginners-guide-to-cdc-change-data-capture/"&gt;change data capture&lt;/a&gt;, or CDC for short.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Essentially CDC allows to listen to any modifications which are occurring at one end of a data flow (i.e. the data source)
      and communicate them as change events to other interested parties or storing them into a data sink.
      Instead of doing this in a point-to-point fashion, it’s advisable to decouple this flow of events
      between data sources and data sinks. Such a scenario can be implemented based on &lt;a href="http://debezium.io/"&gt;Debezium&lt;/a&gt;
      and &lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt; with relative ease and effectively no coding.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;As an example, consider the following microservice-based architecture of an order management system:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="imageblock centered-image"&gt;
      &lt;div class="content"&gt;
      &lt;img src="http://debezium.io/images/msa_streaming.png" alt="Microservice-based architecture of an order management system"&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This system comprises three services, &lt;em&gt;Order&lt;/em&gt;, &lt;em&gt;Item&lt;/em&gt; and &lt;em&gt;Stock&lt;/em&gt;.
      If the &lt;em&gt;Order&lt;/em&gt; service receives an order request, it will need information from the other two,
      such as item definitions or the stock count for specific items.
      Instead of making synchronous calls to these services to obtain this information,
      CDC can be used to set up change event streams for the data managed by the &lt;em&gt;Item&lt;/em&gt; and &lt;em&gt;Stock&lt;/em&gt; services.
      The &lt;em&gt;Order&lt;/em&gt; service can subscribe to these event streams and keep a local copy of the relevant item and stock data in its own database.
      This approach helps to decouple the services
      (e.g. no direct impact by service outages)
      and can also be beneficial for overall performance,
      as each service can hold optimized views just of those data items owned by other services which it is interested in.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="how_to_handle_aggregate_objects"&gt;
      &lt;a class="anchor" href="#how_to_handle_aggregate_objects"&gt;&lt;/a&gt;How to Handle Aggregate Objects?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;There are use cases however, where things are a bit more tricky. It is sometimes
      useful to share information across services and data stores by means of so-called
      aggregates, which are a concept/pattern defined by domain-driven design (DDD).
      In general, a &lt;a href="https://martinfowler.com/bliki/DDD_Aggregate.html"&gt;DDD aggregate&lt;/a&gt; is used
      to transfer state which can be comprised of multiple different domain objects that are
      together treated as a single unit of information.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Concrete examples are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;customers and their addresses&lt;/strong&gt; which are represented as a customer record &lt;em&gt;aggregate&lt;/em&gt;
      storing a customer and a list of addresses&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;orders and corresponding line items&lt;/strong&gt; which are represented as an order record
      &lt;em&gt;aggregate&lt;/em&gt; storing an order and all its line items&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Chances are that the data of the involved domain objects backing these DDD aggregates are stored in
      separate relations of an RDBMS. When making use of the CDC capabilities currently found
      in Debezium, all changes to domain objects will be independently captured and by default eventually
      reflected in separate Kafka topics, one per RDBMS relation. While this behaviour
      is tremendously helpful for a lot of use cases it can be pretty limiting to others,
      like the DDD aggregate scenario described above.
      Therefore, this blog post explores how DDD aggregates can be built based on Debezium CDC events,
      using the &lt;a href="https://kafka.apache.org/documentation/streams/"&gt;Kafka Streams API&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="capturing_change_events_from_a_data_source"&gt;
      &lt;a class="anchor" href="#capturing_change_events_from_a_data_source"&gt;&lt;/a&gt;Capturing Change Events from a Data Source&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The complete source code for this blog post is provided in the Debezium &lt;a href="https://github.com/debezium/debezium-examples/tree/master/kstreams"&gt;examples repository&lt;/a&gt; on GitHub.
      Begin by cloning this repository and changing into the &lt;em&gt;kstreams&lt;/em&gt; directory:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;git clone https://github.com/debezium/debezium-examples.git
      cd kstreams&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The project provides a Docker Compose file with services for all the components you may already know from the &lt;a href="http://debezium.io/docs/tutorial/"&gt;Debezium tutorial&lt;/a&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://zookeeper.apache.org/"&gt;Apache ZooKeeper&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A &lt;a href="https://kafka.apache.org/documentation/#connect"&gt;Kafka Connect&lt;/a&gt; instance with the Debezium CDC connectors&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.mysql.com/"&gt;MySQL&lt;/a&gt; (populated with some test data)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;In addition it declares the following services:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; which will be used as a data sink&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Another Kafka Connect instance which will host the MongoDB sink connector&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A service for running the DDD aggregation process we’re going to build in the following&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We’ll get to those three in a bit, for now let’s prepare the source side of our pipeline:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;export DEBEZIUM_VERSION=0.7
      docker-compose up mysql zookeeper kafka connect_source&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Once all services have been started, register an instance of the Debezium MySQL connector by submitting the following JSON document:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-json" data-lang="json"&gt;{
          "name": "mysql-source",
          "config": {
              "connector.class": "io.debezium.connector.mysql.MySqlConnector",
              "tasks.max": "1",
              "database.hostname": "mysql",
              "database.port": "3306",
              "database.user": "debezium",
              "database.password": "dbz",
              "database.server.id": "184054",
              "database.server.name": "dbserver1",
              "table.whitelist": "inventory.customers,inventory.addresses",
              "database.history.kafka.bootstrap.servers": "kafka:9092",
              "database.history.kafka.topic": "schema-changes.inventory",
              "transforms": "unwrap",
              "transforms.unwrap.type":"io.debezium.transforms.UnwrapFromEnvelope",
              "transforms.unwrap.drop.tombstones":"false"
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;To do so, run the following curl command:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;curl -i -X POST -H "Accept:application/json" -H  "Content-Type:application/json" http://localhost:8083/connectors/ -d @mysql-source.json&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This sets up the connector for the specified database, using the given credentials.
      For our purposes we’re only interested in changes to the &lt;code&gt;customers&lt;/code&gt; and &lt;code&gt;addresses&lt;/code&gt; tables,
      hence the &lt;code&gt;table.whitelist&lt;/code&gt; property is given to just select these two tables.
      Another noteworthy thing is the "unwrap" transform that is applied.
      By default, Debezium’s CDC events would contain the old and new state of changed rows and some additional metadata on the source of the change.
      By applying the &lt;a href="http://debezium.io/docs/configuration/event-flattening/"&gt;UnwrapFromEnvelope&lt;/a&gt; SMT (single message transformation),
      only the new state will be propagated into the corresponding Kafka topics.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We can take a look at them once the connector has been deployed and finished its initial snapshot of the two captured tables:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose exec kafka /kafka/bin/kafka-console-consumer.sh \
          --bootstrap-server kafka:9092 \
          --from-beginning \
          --property print.key=true \
          --topic dbserver1.inventory.customers # or dbserver1.inventory.addresses&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;E.g. you should see the following output&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;(formatted and omitting the schema information for the sake of readability) for the topic with customer changes:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;{
          "schema": { ... },
          "payload": {
              "id": 1001
          }
      }
      {
          "schema": { ... },
          "payload": {
              "id": 1001,
              "first_name": "Sally",
              "last_name": "Thomas",
              "email": "sally.thomas@acme.com"
          }
      }
      ...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="building_ddd_aggregates"&gt;
      &lt;a class="anchor" href="#building_ddd_aggregates"&gt;&lt;/a&gt;Building DDD Aggregates&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The KStreams application is going to process data from the two Kafka topics. These topics
      receive CDC events based on the customers and addresses relations found in MySQL, each of which has its
      corresponding Jackson-annotated POJO (Customer and Address), enriched by a field holding the CDC event type (i.e. UPSERT/DELETE).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Since the Kafka topic records are in Debezium JSON format with unwrapped envelopes, a special &lt;strong&gt;SerDe&lt;/strong&gt;
      has been written in order to be able to read/write these records using their POJO or Debezium event representation respectively.
      While the serializer simply converts the POJOs into JSON using Jackson, the deserializer is a "hybrid"
      one, being able to deserialize from either Debezium CDC events or jsonified POJOs.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;With that in place, the KStreams topology to create and maintain DDD aggregates on-the-fly can be built as follows:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="customers_topic_parent"&gt;
      &lt;a class="anchor" href="#customers_topic_parent"&gt;&lt;/a&gt;Customers Topic ("parent")&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;All the customer records are simply read from the customer topic into a &lt;strong&gt;KTable&lt;/strong&gt; which will automatically maintain
      the latest state per customer according to the record key (i.e. the customer’s PK)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;KTable&amp;lt;DefaultId, Customer&amp;gt; customerTable =
              builder.table(parentTopic, Consumed.with(defaultIdSerde,customerSerde));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="addresses_topic_children"&gt;
      &lt;a class="anchor" href="#addresses_topic_children"&gt;&lt;/a&gt;Addresses Topic ("children")&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;For the address records the processing is a bit more involved and needs several steps. First, all the address
      records are read into a &lt;strong&gt;KStream&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;KStream&amp;lt;DefaultId, Address&amp;gt; addressStream = builder.stream(childrenTopic,
              Consumed.with(defaultIdSerde, addressSerde));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Second, a 'pseudo' grouping of these address records is done based on their keys (the original primary key in the relation),
      During this step the relationships towards the corresponding customer records are maintained. This effectively allows to keep
      track which address record belongs to which customer record, even in the light of address record deletions.
      To achieve this an additional &lt;em&gt;LatestAddress&lt;/em&gt; POJO is introduced which allows to store the latest known PK &amp;lt;→ FK
      relation in addition to the &lt;em&gt;Address&lt;/em&gt; record itself.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;KTable&amp;lt;DefaultId,LatestAddress&amp;gt; tempTable = addressStream
              .groupByKey(Serialized.with(defaultIdSerde, addressSerde))
              .aggregate(
                      () -&amp;gt; new LatestAddress(),
                      (DefaultId addressId, Address address, LatestAddress latest) -&amp;gt; {
                          latest.update(
                              address, addressId, new DefaultId(address.getCustomer_id()));
                          return latest;
                      },
                      Materialized.&amp;lt;DefaultId,LatestAddress,KeyValueStore&amp;lt;Bytes, byte[]&amp;gt;&amp;gt;
                              as(childrenTopic+"_table_temp")
                                  .withKeySerde(defaultIdSerde)
                                      .withValueSerde(latestAddressSerde)
              );&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Third, the intermediate &lt;strong&gt;KTable&lt;/strong&gt; is again converted to a &lt;strong&gt;KStream&lt;/strong&gt;. The &lt;em&gt;LatestAddress&lt;/em&gt; records are transformed
      to have the customer id (FK relationship) as their new key in order to group them per customer.
      During the grouping step, customer specific addresses are updated which can result in an address
      record being added or deleted. For this purpose, another POJO called &lt;em&gt;Addresses&lt;/em&gt; is introduced, which
      holds a map of address records that gets updated accordingly. The result is a &lt;strong&gt;KTable&lt;/strong&gt; holding the
      most recent &lt;em&gt;Addresses&lt;/em&gt; per customer id.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;KTable&amp;lt;DefaultId, Addresses&amp;gt; addressTable = tempTable.toStream()
              .map((addressId, latestAddress) -&amp;gt;
                  new KeyValue&amp;lt;&amp;gt;(latestAddress.getCustomerId(),latestAddress))
              .groupByKey(Serialized.with(defaultIdSerde,latestAddressSerde))
              .aggregate(
                      () -&amp;gt; new Addresses(),
                      (customerId, latestAddress, addresses) -&amp;gt; {
                          addresses.update(latestAddress);
                          return addresses;
                      },
                      Materialized.&amp;lt;DefaultId,Addresses,KeyValueStore&amp;lt;Bytes, byte[]&amp;gt;&amp;gt;
                              as(childrenTopic+"_table_aggregate")
                                  .withKeySerde(defaultIdSerde)
                                      .withValueSerde(addressesSerde)
              );&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="combining_customers_with_addresses"&gt;
      &lt;a class="anchor" href="#combining_customers_with_addresses"&gt;&lt;/a&gt;Combining Customers With Addresses&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Finally, it’s easy to bring customers and addresses together by &lt;strong&gt;joining the customers KTable with
      the addresses KTable&lt;/strong&gt; and thereby building the DDD aggregates which are represented by the &lt;em&gt;CustomerAddressAggregate&lt;/em&gt; POJO.
      At the end, the KTable changes are written to a KStream, which in turn gets saved into a kafka topic.
      This allows to make use of the resulting DDD aggregates in manifold ways.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;KTable&amp;lt;DefaultId,CustomerAddressAggregate&amp;gt; dddAggregate =
                customerTable.join(addressTable, (customer, addresses) -&amp;gt;
                    customer.get_eventType() == EventType.DELETE ?
                            null :
                            new CustomerAddressAggregate(customer,addresses.getEntries())
                );
      
        dddAggregate.toStream().to("final_ddd_aggregates",
                                    Produced.with(defaultIdSerde,(Serde)aggregateSerde));&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="admonitionblock note"&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td class="icon"&gt;
      &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class="content"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Records in the customers KTable might receive a CDC delete event. If so, this can be detected by
      checking the event type field of the customer POJO and e.g. return 'null' instead of a DDD aggregate.
      Such a convention can be helpful whenever consuming parties also need to act to deletions accordingly._&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="running_the_aggregation_pipeline"&gt;
      &lt;a class="anchor" href="#running_the_aggregation_pipeline"&gt;&lt;/a&gt;Running the Aggregation Pipeline&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Having implemented the aggregation pipeline, it’s time to give it a test run.
      To do so, build the &lt;em&gt;poc-ddd-aggregates&lt;/em&gt; Maven project which contains the complete implementation:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;mvn clean package -f poc-ddd-aggregates/pom.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Then run the &lt;code&gt;aggregator&lt;/code&gt; service from the Compose file which takes the JAR built by this project
      and launches it using the &lt;a href="https://hub.docker.com/r/fabric8/java-jboss-openjdk8-jdk/"&gt;java-jboss-openjdk8-jdk&lt;/a&gt; base image:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose up -d aggregator&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Once the aggregation pipeline is running, we can take a look at the aggregated events using the console consumer:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose exec kafka /kafka/bin/kafka-console-consumer.sh \
          --bootstrap-server kafka:9092 \
          --from-beginning \
          --property print.key=true \
          --topic final_ddd_aggregates&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="transferring_ddd_aggregates_to_data_sinks"&gt;
      &lt;a class="anchor" href="#transferring_ddd_aggregates_to_data_sinks"&gt;&lt;/a&gt;Transferring DDD Aggregates to Data Sinks&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We originally set out to build these DDD aggregates in order to transfer data and synchronize changes between
      a data source (MySQL tables in this case) and a convenient data sink. By definition,
      DDD aggregates are typically complex data structures and therefore it makes perfect sense to write them
      to data stores which offer flexible ways and means to query and/or index them. Talking about NoSQL databases, a
      document store seems the most natural choice with &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; being the leading database
      for such use cases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Thanks to &lt;a href="https://kafka.apache.org/documentation/#connect"&gt;Kafka Connect&lt;/a&gt; and numerous turn-key ready
      &lt;a href="https://www.confluent.io/product/connectors/"&gt;connectors&lt;/a&gt; it is almost effortless to get this done.
      Using a &lt;a href="https://github.com/hpgrahsl/kafka-connect-mongodb"&gt;MongoDB sink connector&lt;/a&gt; from the open-source community,
      it is easy to have the DDD aggregates written into MongoDB. All it needs is a proper configuration which can be posted
      to the &lt;a href="https://docs.confluent.io/current/connect/restapi.html"&gt;REST API&lt;/a&gt; of Kafka Connect in order to run the connector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;So let’s start MongoDb and another Kafka Connect instance for hosting the sink connector:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose up -d mongodb connect_sink&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;In case the DDD aggregates should get written unmodified into MongoDB, a configuration may look as simple as follows:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-json" data-lang="json"&gt;{
          "name": "mongodb-sink",
          "config": {
              "connector.class": "at.grahsl.kafka.connect.mongodb.MongoDbSinkConnector",
              "tasks.max": "1",
              "topics": "final_ddd_aggregates",
              "mongodb.connection.uri": "mongodb://mongodb:27017/inventory?w=1&amp;amp;journal=true",
              "mongodb.collection": "customers_with_addresses",
              "mongodb.document.id.strategy": "at.grahsl.kafka.connect.mongodb.processor.id.strategy.FullKeyStrategy",
              "mongodb.delete.on.null.values": true
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;As with the source connector, deploy the connector using curl:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;curl -i -X POST -H "Accept:application/json" -H  "Content-Type:application/json" http://localhost:8084/connectors/ -d @mongodb-sink.json&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This connector will consume messages from the "final_ddd_aggregates" Kafka topic and
      write them as &lt;strong&gt;MongoDB documents&lt;/strong&gt; into the "customers_with_addresses" collection.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;You can take a look by firing up a Mongo shell and querying the collection’s contents:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose exec mongodb bash -c 'mongo inventory'
      
      &amp;gt; db.customers_with_addresses.find().pretty()&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-json" data-lang="json"&gt;{
          "_id": {
              "id": "1001"
          },
          "addresses": [
              {
                  "zip": "76036",
                  "_eventType": "UPSERT",
                  "city": "Euless",
                  "street": "3183 Moore Avenue",
                  "id": "10",
                  "state": "Texas",
                  "customer_id": "1001",
                  "type": "SHIPPING"
              },
              {
                  "zip": "17116",
                  "_eventType": "UPSERT",
                  "city": "Harrisburg",
                  "street": "2389 Hidden Valley Road",
                  "id": "11",
                  "state": "Pennsylvania",
                  "customer_id": "1001",
                  "type": "BILLING"
              }
          ],
          "customer": {
              "_eventType": "UPSERT",
              "last_name": "Thomas",
              "id": "1001",
              "first_name": "Sally",
              "email": "sally.thomas@acme.com"
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Due to the combination of the data in a single document some parts aren’t needed or redundant. To get rid of any
      unwanted data (e.g. _eventType, customer_id of each address sub-document) it would also be possible
      to adapt the configuration in order to blacklist said fields.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Finally, you update some customer or address data in the MySQL source database:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="highlight"&gt;&lt;code class="language-shell" data-lang="shell"&gt;docker-compose exec mysql bash -c 'mysql -u $MYSQL_USER -p$MYSQL_PASSWORD inventory'
      
      mysql&amp;gt; update customers set first_name= "Sarah" where id = 1001;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Shortly thereafter, you should see that the corresponding aggregate document in MongoDB has been updated accordingly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="drawbacks_and_limitations"&gt;
      &lt;a class="anchor" href="#drawbacks_and_limitations"&gt;&lt;/a&gt;Drawbacks and Limitations&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;While this first version for creating DDD aggregates from table-based CDC events basically works, it is very important to understand its current limitations:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;not generically applicable thus needs custom code for POJOs and intermediate types&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;cannot be scaled across multiple instances as is due to missing but necessary data repartitioning prior to processing&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;limited to building aggregates based on a single JOIN between 1:N relationships&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;resulting DDD aggregates are eventually consistent, meaning that it is possible for them to temporarily exhibit intermediate state before converging&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The first few can be addressed with a reasonable amount of work on the KStreams application. The last one,
      dealing with the eventually consistent nature of resulting DDD aggregates is much harder to correct
      and will require some efforts at Debezium’s own CDC mechanism.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="outlook"&gt;
      &lt;a class="anchor" href="#outlook"&gt;&lt;/a&gt;Outlook&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;In this post we described an approach for creating aggregated events from Debezium’s CDC events.
      In a follow-up blog post we may dive a bit more into the topic of how to be able to horizontally scale
      the DDD creation by running multiple KStreams aggregator instances. For that purpose, the data needs proper
      re-partitioning before running the topology. In addition, it could be interesting to look into
      a somewhat more generic version which only needs custom classes to the describe the two main POJOs involved.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We also thought about providing a ready-to-use component which would work in a generic way
      (based on Connect records, i.e. not tied to a specific serialization format such as JSON) and
      could be set up as a configurable stand-alone process running given aggregations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Also on the topic of dealing with eventual consistency we got some ideas,
      but those will need some more exploration and investigation for sure.
      Stay tuned!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We’d love to hear about your feedback on the topic of event aggreation.
      If you got any ideas or thoughts on the subject,
      please get in touch by posting a comment below or sending a message to our &lt;a href="https://groups.google.com/forum/#!forum/debezium"&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>Microservice-based architectures can be considered an industry trend and are thus often found in enterprise applications lately. One possible way to keep data synchronized across multiple services and their backing data stores is to make us of an approach called change data capture, or CDC for short. Essentially CDC allows to listen to any modifications which are occurring at one end of a data flo...</atom:summary></atom:entry><atom:entry><atom:title>Hibernate Validator 6.0.8.Final released</atom:title><atom:link href="http://in.relation.to/2018/03/08/hibernate-validator-608-final-out/"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_hibernate"/><atom:category scheme="searchisko:content:tags" term="feed_name_inrelationto"/><atom:category scheme="searchisko:content:tags" term="Hibernate Validator"/><atom:category scheme="searchisko:content:tags" term="releases"/><atom:updated>2018-03-13T10:35:34-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-hibernate_validator_6_0_8_final_released</atom:id><atom:published>2018-03-07T19:00:00-05:00</atom:published><atom:author><atom:name>Guillaume Smet</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;It has been a couple of months since our last Hibernate Validator release and we have made some significant progress since then.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We just released Hibernate Validator 6.0.8.Final containing all these bugfixes and enhancements.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This is a recommended upgrade for everyone using Hibernate Validator 6.0.x and it is a drop-in replacement of 6.0.7.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="pass-a-payload-to-your-constraint-validators"&gt;&lt;a class="anchor" href="#pass-a-payload-to-your-constraint-validators"&gt;&lt;/a&gt;Pass a payload to your constraint validators&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;&lt;a href="https://github.com/mkurz"&gt;Matthias Kurz&lt;/a&gt; worked on allowing to pass an arbitrary payload to the constraint validators.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Think of it as a good way to make your constraint validators behave differently depending on your environment (locale, production/staging environment, global objects you initialize at bootstrap and want to inject in your constraint validators…​).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The payload is an &lt;code&gt;Object&lt;/code&gt; so it can be a &lt;code&gt;String&lt;/code&gt;, a &lt;code&gt;Map&lt;/code&gt; or even a proper bean.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;You can define the constraint validator payload when initializing the &lt;code&gt;ValidatorFactory&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="JAVA"&gt;ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )
          .configure()
          .constraintValidatorPayload( &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;US&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt; )
          .buildValidatorFactory();
      
      &lt;span style="color:#0a8;font-weight:bold"&gt;Validator&lt;/span&gt; validator = validatorFactory.getValidator();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;and also refine it when initializing a specific &lt;code&gt;Validator&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="JAVA"&gt;HibernateValidatorFactory hibernateValidatorFactory = Validation.byDefaultProvider()
          .configure()
          .buildValidatorFactory()
          .unwrap( HibernateValidatorFactory.class );
      
      &lt;span style="color:#0a8;font-weight:bold"&gt;Validator&lt;/span&gt; validator = hibernateValidatorFactory.usingContext()
          .constraintValidatorPayload( &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;FR&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt; )
          .getValidator();&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Your constraint validator can obtain the constraint validator payload in its &lt;code&gt;initialize()&lt;/code&gt; method:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="JAVA"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;ZipCodeValidator&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;implements&lt;/span&gt; HibernateConstraintValidator&amp;lt;ZipCode, &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt;&amp;gt; {
      
          &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; countryCode;
      
          &lt;span style="color:#007"&gt;@Override&lt;/span&gt;
          &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; initialize(ConstraintDescriptor&amp;lt;ZipCode&amp;gt; constraintDescriptor,
                  HibernateConstraintValidatorInitializationContext initializationContext) {
              &lt;span style="color:#950"&gt;this&lt;/span&gt;.countryCode = initializationContext
                      .getConstraintValidatorPayload( &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt;.class );
          }
      
          [...]
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;You can find all the information related to this new feature in &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#constraint-validator-payload"&gt;our reference documentation&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="performance-and-build-improvements"&gt;&lt;a class="anchor" href="#performance-and-build-improvements"&gt;&lt;/a&gt;Performance and build improvements&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;&lt;a href="https://github.com/marko-bekhta"&gt;Marko&lt;/a&gt; worked on a few performance improvements (&lt;a href="https://hibernate.atlassian.net/browse/HV-1566"&gt;HV-1566&lt;/a&gt;, &lt;a href="https://hibernate.atlassian.net/browse/HV-1543"&gt;HV-1543&lt;/a&gt; and &lt;a href="https://hibernate.atlassian.net/browse/HV-1444"&gt;HV-1444&lt;/a&gt;) that should make Hibernate Validator 6.0.8.Final faster than ever.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV-1444"&gt;HV-1444&lt;/a&gt; also improved our correctness towards the Bean Validation specification in some corner cases related to container element constraints.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We also made quite a lot of build improvements related to JDK 9 and the TCK and upgraded our dependencies.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="wildfly-12"&gt;&lt;a class="anchor" href="#wildfly-12"&gt;&lt;/a&gt;WildFly 12&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;As WildFly 12 &lt;a href="http://wildfly.org/news/2018/02/28/WildFly12-Final-Released/"&gt;got released&lt;/a&gt; recently, we updated our build to test Hibernate Validator on WildFly 11 and 12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We currently produce WildFly patches to upgrade the Hibernate Validator modules inside WildFly for these two versions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Note that WildFly 12 now includes Bean Validation 2.0 and Hibernate Validator 6.0 (6.0.7.Final) but they are not enabled by default. You need to enable the EE8 preview mode by appending the &lt;code&gt;ee8.preview.mode&lt;/code&gt; option, as explained in the &lt;a href="http://wildfly.org/news/2018/02/28/WildFly12-Final-Released/"&gt;WildFly 12 announcement&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="bugs-fixed"&gt;&lt;a class="anchor" href="#bugs-fixed"&gt;&lt;/a&gt;Bugs fixed&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We also fixed a few bugs, most notably:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV-1461"&gt;HV-1461&lt;/a&gt; - A bug that could interfere with method overriding in a few corner cases - it was fixed by a &lt;a href="https://github.com/FasterXML/java-classmate"&gt;Classmate&lt;/a&gt; upgrade&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV-1551"&gt;HV-1551&lt;/a&gt; - It wasn’t possible to define &lt;code&gt;@Size&lt;/code&gt; constraints on raw collections (e.g. &lt;code&gt;private List myList&lt;/code&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="translation-updates"&gt;&lt;a class="anchor" href="#translation-updates"&gt;&lt;/a&gt;Translation updates&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The Spanish translation of the default messages was updated by &lt;a href="https://github.com/HillmerCh"&gt;Hillmer Chona&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect2"&gt;
      &lt;h3 id="full-changelog"&gt;&lt;a class="anchor" href="#full-changelog"&gt;&lt;/a&gt;Full changelog&lt;/h3&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The complete list of fixed issues can be found &lt;a href="https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HV%20AND%20fixVersion%20%3D%206.0.8.Final%20order%20by%20created%20DESC"&gt;on our JIRA&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="getting-6-0-8-final"&gt;&lt;a class="anchor" href="#getting-6-0-8-final"&gt;&lt;/a&gt;Getting 6.0.8.Final&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;To get the release with Maven, Gradle etc. use the GAV coordinates &lt;em&gt;org.hibernate.validator:{hibernate-validator|hibernate-validator-cdi|hibernate-validator-annotation-processor}:6.0.8.Final&lt;/em&gt;. Note that the group id has changed from &lt;code&gt;org.hibernate&lt;/code&gt; (Hibernate Validator 5 and earlier) to &lt;code&gt;org.hibernate.validator&lt;/code&gt; (from Hibernate Validator 6 onwards).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Alternatively, a distribution bundle containing all the bits is provided on SourceForge (&lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.8.Final/hibernate-validator-6.0.8.Final-dist.tar.gz/download"&gt;TAR.GZ&lt;/a&gt;, &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.8.Final/hibernate-validator-6.0.8.Final-dist.zip/download"&gt;ZIP&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;If you want to benefit from the new features of this version on WildFly, we also provide WildFly patches for &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.8.Final/hibernate-validator-modules-6.0.8.Final-wildfly-11.0.0.Final-patch.zip"&gt;WildFly 11&lt;/a&gt; and &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.8.Final/hibernate-validator-modules-6.0.8.Final-wildfly-12.0.0.Final-patch.zip"&gt;WildFly 12&lt;/a&gt;. You can read about how to apply such patches &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_updating_hibernate_validator_in_wildfly"&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We will continue to publish maintenance releases to fix quickly the issues reported by our users.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We updated &lt;a href="http://hibernate.org/validator/roadmap/"&gt;our roadmap&lt;/a&gt; with the ideas we have for the future. If you want to join us, don’t hesitate to pick a task and come discuss it with us.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-validator"&gt;hibernate-validator tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-validator"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/beanvalidation-dev/"&gt;Bean Validation development mailing list&lt;/a&gt; (discussions about the Bean Validation specification)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>It has been a couple of months since our last Hibernate Validator release and we have made some significant progress since then. We just released Hibernate Validator 6.0.8.Final containing all these bugfixes and enhancements. This is a recommended upgrade for everyone using Hibernate Validator 6.0.x and it is a drop-in replacement of 6.0.7.Final. What’s new Pass a payload to your constraint valida...</atom:summary></atom:entry><atom:entry><atom:title>Fifteenth bug-fix release for ORM 5.2</atom:title><atom:link href="http://in.relation.to/2018/03/08/hibernate-orm-5215-final-release/"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_hibernate"/><atom:category scheme="searchisko:content:tags" term="feed_name_inrelationto"/><atom:category scheme="searchisko:content:tags" term="Hibernate ORM"/><atom:category scheme="searchisko:content:tags" term="releases"/><atom:updated>2018-03-13T10:35:34-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-fifteenth_bug_fix_release_for_orm_5_2</atom:id><atom:published>2018-03-07T19:00:00-05:00</atom:published><atom:author><atom:name>andrea boriero</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The Fifteenth bug-fix release for Hibernate ORM 5.2 has just been published.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new ?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This release introduces several minor features and fixes more bugs. See below for the complete list
      of changes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="details"&gt;&lt;a class="anchor" href="#details"&gt;&lt;/a&gt;Details&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;tag is &lt;a href="http://github.com/hibernate/hibernate-orm/releases/tag/5.2.15"&gt;here&lt;/a&gt;;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the complete list of changes can be found &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31642/tab/release-report-done"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31642&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;);&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;release bundles are at &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/5.2.15.Final/"&gt;SourceForge&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;For information on consuming the release via your favorite dependency-management-capable build tool, see &lt;a href="http://hibernate.org/orm/releases/5.2"&gt;releases&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>The Fifteenth bug-fix release for Hibernate ORM 5.2 has just been published. What’s new ? This release introduces several minor features and fixes more bugs. See below for the complete list of changes. Details tag is here; the complete list of changes can be found here (or, for people without a Hibernate Jira account, here); release bundles are at SourceForge. For information on consuming the rele...</atom:summary></atom:entry><atom:entry><atom:title>Interested in Science-Fiction novels ?</atom:title><atom:link href="http://abiteoftechnology.blogspot.com/2018/03/interested-in-science-fiction-novels_7.html"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_global_community"/><atom:category scheme="searchisko:content:tags" term="feed_name_biteoftech"/><atom:updated>2018-03-07T11:06:30-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-interested_in_science_fiction_novels</atom:id><atom:published>2018-03-07T11:06:00-05:00</atom:published><atom:author><atom:name>Francesco Marchioni</atom:name></atom:author><atom:content type="html">Interested in Science-Fiction novels ? Here is my first foray on the topic!&lt;br /&gt;The title is: "&lt;b&gt;Chronicles from a Simulated World&lt;/b&gt;".&lt;br /&gt;It's a book about stories, or simple facts of life of people, in their quest to answer a simple yet tricky question:"&lt;i&gt;Is our world real?&lt;/i&gt;"&lt;br /&gt;Through the voice of these people I will try to convince you that this world has been carefully &lt;i&gt;programmed&lt;/i&gt; (be it for fun or as an experiment) by somebody living in an &lt;b&gt;High Castle&lt;/b&gt;.&lt;br /&gt;Available in English and Italian.&lt;br /&gt;&lt;iframe frameborder="0" marginheight="0" marginwidth="0" scrolling="no" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;OneJS=1&amp;amp;Operation=GetAdHtml&amp;amp;MarketPlace=US&amp;amp;source=ac&amp;amp;ref=tf_til&amp;amp;ad_type=product_link&amp;amp;tracking_id=fmarchioni-20&amp;amp;marketplace=amazon&amp;amp;region=US&amp;amp;placement=B07B4QZRFV&amp;amp;asins=B07B4QZRFV&amp;amp;linkId=aa889f6d5b2c7604a284d4487f2dc531&amp;amp;show_border=false&amp;amp;link_opens_in_new_window=false&amp;amp;price_color=333333&amp;amp;title_color=0066c0&amp;amp;bg_color=ffffff" style="height: 240px; width: 120px;"&gt; &lt;/iframe&gt; &lt;iframe frameborder="0" marginheight="0" marginwidth="0" scrolling="no" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;OneJS=1&amp;amp;Operation=GetAdHtml&amp;amp;MarketPlace=US&amp;amp;source=ac&amp;amp;ref=tf_til&amp;amp;ad_type=product_link&amp;amp;tracking_id=fmarchioni-20&amp;amp;marketplace=amazon&amp;amp;region=US&amp;amp;placement=B07B789QK2&amp;amp;asins=B07B789QK2&amp;amp;linkId=948dec29a4acab99e8cd9fb4b5cf9e7f&amp;amp;show_border=false&amp;amp;link_opens_in_new_window=false&amp;amp;price_color=333333&amp;amp;title_color=0066C0&amp;amp;bg_color=FFFFFF" style="height: 240px; width: 120px;"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.wearelivinginasimulation.com/"&gt;Are we living in a simulation ?&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.wearelivinginasimulation.com/computer-simulation/10-reasons-why-we-are-likely-to-live-in-a-computer-simulation"&gt;10 reasons why we might be living in a simulation &lt;/a&gt;</atom:content><atom:summary>Interested in Science-Fiction novels ? Here is my first foray on the topic! The title is: "Chronicles from a Simulated World". It's a book about stories, or simple facts of life of people, in their quest to answer a simple yet tricky question:"Is our world real?" Through the voice of these people I will try to convince you that this world has been carefully programmed (be it for fun or as an exper...</atom:summary></atom:entry><atom:entry><atom:title>REST with HTTP/2</atom:title><atom:link href="http://feedproxy.google.com/~r/Infinispan/~3/cJx69ExcrS8/rest-with-http2.html"/><atom:category scheme="searchisko:content:tags" term="docker"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="feed_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="HTTP/2"/><atom:category scheme="searchisko:content:tags" term="REST"/><atom:category scheme="searchisko:content:tags" term="server"/><atom:updated>2018-03-07T08:03:57-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-rest_with_http_2</atom:id><atom:published>2018-03-07T08:00:00-05:00</atom:published><atom:author><atom:name>Sebastian Łaskawiec</atom:name></atom:author><atom:content type="html">&lt;div style="text-align: justify;"&gt;HTTP has become one of the most successful and heavily used network protocols around the world. Version 1.0 was created in 1996 and received a minor update 3 years later. But it took more than a decade to create HTTP/2 (which was approved in 2015). Why did it take so long? Well, I wouldn’t tell you all the truth if I didn’t mention an &lt;a href="https://developers.google.com/web/fundamentals/performance/http2/"&gt;experimental protocol, called SPDY&lt;/a&gt;. SPDY was primarily focused on improving performance. The initial results were very promising and inside Google’s lab, the developers &lt;a href="https://blog.chromium.org/2009/11/2x-faster-web.html"&gt;measured 55% speed improvement&lt;/a&gt;. This work and experience was converted into HTTP/2 proposal back in 2012. A few years later, we can all use HTTP/2 (sometimes called h2) along with its older brother - HTTP/1.1.&lt;/div&gt;&lt;h4&gt;Main differences between HTTP/1.1 and HTTP/2&lt;/h4&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img height="515" src="https://lh6.googleusercontent.com/QGDSTl40Vz0ROc0koZA_QWHQ_yGB1M_rEISrd42_mQv4MA9WJCUyag6RUsfTkCx0juSiZnbGiTXLvJDr86REpdAPWDEfntqVjaXh8zN3uDf3J1qRugr9nsk3wfqCR4WkZ1jLtg-s" style="border: medium none; transform: rotate(0rad);" width="624" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;HTTP/1.1 is a text-based protocol. Sometimes this is very convenient, since you can use low level tools, such as Telnet, for hacking. But it doesn’t work very well for transporting large, binary payloads. HTTP/2 solves this problem by using a completely redesigned architecture. Each HTTP message (a request or a response) consists of one or more frames. A frame is the smallest portion of data travelling through a TCP connection. A set of messages is aggregated into a, so called stream.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img height="171" src="https://lh3.googleusercontent.com/PYdtYy6RLlUFY3pUVfg-E_5_AomfRZW9O1EHTkytWnkKDXhlCkjsf-D4N7_CiG9AndYDZ7tAYTkrMQEeDi56PvcnvPaZ-9YNqswuTtqUY0IsTzo6UtXJrInhTKTc_SzGy-Zh_u0V" style="border: medium none; transform: rotate(0rad);" width="624" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;HTTP/2 allows to lower the number of physical connections between the server and the client by multiplexing logical connections into one TCP connection. Streams allow the server to recognize, which frame belongs to which conversation. &lt;h4&gt;How to connect using HTTP/2?&lt;/h4&gt;There are two ways for starting an HTTP/2 conversation.&lt;br /&gt;&lt;br /&gt;The first one, and the most commonly used one, is &lt;a href="https://tools.ietf.org/html/rfc7301"&gt;TLS/ALPN&lt;/a&gt;. During TLS handshake the server and the client negotiate protocol for further communication. Unfortunately JDK below 9 doesn’t support it by default (there are a couple of workarounds but please refer to your favorite HTTP client’s manual to find some suggestions). &lt;br /&gt;&lt;br /&gt;The second one, much less popular, is so called plain text upgrade. During HTTP/1.1 conversation, the client issues an HTTP/1.1 Upgrade header and proposes new conversation protocol. If the server agrees, they start using it. If not, they stick with HTTP/1.1.&lt;br /&gt;&lt;br /&gt;The good news is that Infinispan supports both those upgrade paths. Thanks to the ALPN Hack Engine (the credit goes to Stuart Douglas from the Wildfly Team), we support TLS/ALPN without any bootstrap classpath modification. &lt;h4&gt;Configuring Infinispan server for HTTP/2&lt;/h4&gt;Infinispan’s REST server already supports plain text upgrades out of the box. TLS/ALPN however, requires additional configuration since the server needs to use a Keystore. In order to make it even more convenient, we support &lt;a href="http://infinispan.org/docs/stable/server_guide/server_guide.html#security:hotrod_rest_encryption"&gt;generating keystores automatically when needed&lt;/a&gt;. Here’s an example showing how to configure a security realm:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/3d06a9e65c63d2956c2aab236b4f3552.js"&gt;&lt;/script&gt;The next step is to bind the security realm to a REST endpoint:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/348e79c8cebc5287468aa92e47cf7706.js"&gt;&lt;/script&gt; You may also use one of our configuration examples. The easiest way to get it working is to use our &lt;a href="https://github.com/jboss-dockerfiles/infinispan/tree/master/server"&gt;Docker image&lt;/a&gt;: &lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/slaskawi/50db9bd2dff06858cb8dcd431c80070e.js"&gt;&lt;/script&gt;Let’s explain a couple of things from the command above: &lt;ul&gt;&lt;li&gt;-e "APP_USER=test" - This is a user name we will be used for REST authentication.&lt;/li&gt;&lt;li&gt;-e "APP_PASS=test" - Corresponding password.&lt;/li&gt;&lt;li&gt;../../docs/examples/configs/standalone-rest-ssl.xml - Here is a ready-to-go configuration with REST and TLS/ALPN support&lt;/li&gt;&lt;/ul&gt;Unfortunately, HTTP/2 functionality &lt;a href="https://issues.jboss.org/browse/ISPN-8896"&gt;has been broken in 9.2.0.Final&lt;/a&gt;. But we promise to fix it as soon as we can :) Please use 9.1.5.Final in the meantime.&lt;/div&gt;&lt;h4&gt;Testing using CURL&lt;/h4&gt;&lt;div style="text-align: justify;"&gt;&lt;a href="https://linux.die.net/man/1/curl"&gt;Curl&lt;/a&gt; is one of my favorite tools. It’s very simple, powerful, and… it supports HTTP/2. Assuming that you already started Infinispan server using `docker run` command, you can put something into the cache:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/7766823ea511e6551568126274f4773a.js"&gt;&lt;/script&gt;&lt;div style="text-align: justify;"&gt;Once, it’s there, let’s try to get it back:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/slaskawi/8e54b566d4fe0b955218c8d1e913c00c.js"&gt;&lt;/script&gt;&lt;div style="text-align: justify;"&gt;Let’s analyze CURL switches one by one:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;-k - Ignores certificate validation. All automatically generated certificates and self-signed and not trusted by default.&lt;/li&gt;&lt;li&gt;-v - Debug logging.&lt;/li&gt;&lt;li&gt;-u test:test - Username and password for authentication.&lt;/li&gt;&lt;li&gt;-d test - This is the payload when invoking HTTP POST.&lt;/li&gt;&lt;li&gt;-H “Accept: text/plain” - This tells the server what type of data we’d like to get in return.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4&gt;Conclusions and links&lt;/h4&gt;&lt;div style="text-align: justify;"&gt;I hope you enjoyed this small tutorial about HTTP/2. I highly encourage you to have a look at the links below to learn some more things about this topic. You may also measure the performance of your app when using HTTP/1.1 and HTTP/2. You will be surprised!&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://hpbn.co/"&gt;High Performance Browser Networking&lt;/a&gt; - One of the best books about HTTP and network performance. Most of the graphics in this article has been copied from that book. I highly recommend it!&lt;/li&gt;&lt;li&gt;&lt;a href="https://linux.die.net/man/1/curl"&gt;Curl manual&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://hub.docker.com/r/jboss/infinispan-server/"&gt;Infinispan on Docker Hub&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/cJx69ExcrS8" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>HTTP has become one of the most successful and heavily used network protocols around the world. Version 1.0 was created in 1996 and received a minor update 3 years later. But it took more than a decade to create HTTP/2 (which was approved in 2015). Why did it take so long? Well, I wouldn’t tell you all the truth if I didn’t mention an experimental protocol, called SPDY. SPDY was primarily focused ...</atom:summary></atom:entry><atom:entry><atom:title>Debezium 0.7.4 Is Released</atom:title><atom:link href="/blog/2018/03/07/debezium-0-7-4-released/"/><atom:category scheme="searchisko:content:tags" term="docker"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_debezium"/><atom:category scheme="searchisko:content:tags" term="feed_name_debezium"/><atom:category scheme="searchisko:content:tags" term="mysql"/><atom:category scheme="searchisko:content:tags" term="postgres"/><atom:category scheme="searchisko:content:tags" term="releases"/><atom:updated>2018-03-12T11:38:49-04:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-debezium_0_7_4_is_released</atom:id><atom:published>2018-03-06T19:00:00-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;It’s my pleasure to announce the release of Debezium &lt;strong&gt;0.7.4&lt;/strong&gt;!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Continuing the 0.7 release line, this new version brings several bug fixes and a handful of new features.
      We recommend this upgrade to all users.
      When upgrading from earlier versions,
      please check out the &lt;a href="http://debezium.io/docs/releases/"&gt;release notes&lt;/a&gt; of all versions between the one you’re currently on and 0.7.4 in order to learn about any steps potentially required for upgrading.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="new_features"&gt;
      &lt;a class="anchor" href="#new_features"&gt;&lt;/a&gt;New features&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;In terms of new features, there’s a new mode for handling decimal columns in Postgres and MySQL (&lt;a href="https://issues.jboss.org/browse/DBZ-611"&gt;DBZ-611&lt;/a&gt;).
      By setting the &lt;code&gt;decimal.handling.mode&lt;/code&gt; connector option to &lt;code&gt;string&lt;/code&gt;, Debezium will emit decimal and numeric columns as Strings.
      That oftentimes is easier to handle for consumers than the byte-array based representation used by default, while keeping the full precision.
      As a bonus, &lt;code&gt;string&lt;/code&gt; also allows to convey the special numeric values &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; as supported by Postgres.
      Note that this functionality required an update to Debezium’s logical decoding plug-in which runs within the Postgres database server.
      This plug-in must be upgraded to the new version &lt;em&gt;before&lt;/em&gt; upgrading the Debezium Postgres connector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Speaking of byte arrays, the &lt;code&gt;BYTEA&lt;/code&gt; column type in Postgres is now also supported (&lt;a href="https://issues.jboss.org/browse/DBZ-605"&gt;DBZ-605&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;For the MySQL connector, there’s a new option to the snapshotting routine: &lt;code&gt;snapshot.locking.mode&lt;/code&gt; (&lt;a href="https://issues.jboss.org/browse/DBZ-602"&gt;DBZ-602&lt;/a&gt;).
      By setting this to &lt;code&gt;NONE&lt;/code&gt;, this option allows to skip any table locks during snapshotting.
      This should be used if and only if you’re absolutely sure that the tables don’t undergo structural changes (columns added, removed etc.)
      while the snapshot is taken.
      But if that’s guaranteed, the new mode can be a useful tool for increasing overall system performance, as writes by concurrent processes won’t be blocked.
      That’s especially useful on environments such as Amazon RDS, where the connector otherwise would be required to keep a lock for the entirety of the snapshot.
      The new option supersedes the existing &lt;code&gt;snapshot.minimal.locks&lt;/code&gt; option.
      Please see the connector documentation for &lt;a href="http://debezium.io/docs/connectors/mysql/#connector-properties"&gt;the details&lt;/a&gt;.
      This feature was contributed by our community member &lt;a href="https://github.com/Crim"&gt;Stephen Powis&lt;/a&gt;; many thanks to you!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="bug_fixes"&gt;
      &lt;a class="anchor" href="#bug_fixes"&gt;&lt;/a&gt;Bug Fixes&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;0.7.4 brings multiple fixes related to how numeric columns are handled.
      E.g. columns without scale couldn’t correctly be processed by the MySQL connector during binlog reading (&lt;a href="https://issues.jboss.org/browse/DBZ-615"&gt;DBZ-615&lt;/a&gt;).
      That’s fixed now.
      And when using the Postgres connector, arbitrary precision column values are correctly converted into change data message fields now (&lt;a href="https://issues.jboss.org/browse/DBZ-351"&gt;DBZ-351&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We also noticed a regression introduced in Debezium 0.6:
      the field schema for &lt;code&gt;NUMERIC&lt;/code&gt; columns was always marked as optional, also if that column was actually declared as &lt;code&gt;NOT NULL&lt;/code&gt;.
      The same affected geo-spatial array types on Postgres as supported as of Debezium 0.7.
      This has been fixed with &lt;a href="https://issues.jboss.org/browse/DBZ-635"&gt;DBZ-635&lt;/a&gt;.
      We don’t expect any impact on consumers by this change
      (just as before, they’ll always get a value for such field, only its schema won’t be incorrectly marked as optional any more).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Please see the &lt;a href="http://debezium.io/docs/releases/#release-0-7-4"&gt;full change log&lt;/a&gt; for more details and the complete list of issues fixed in Debezium 0.7.4.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="what_s_next"&gt;
      &lt;a class="anchor" href="#what_s_next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Following our three weeks release cadence, the next Debezium release is planned for March 28th.
      We got some exciting changes in the works for that:
      if things go as planned, we’ll release the first version of our Oracle connector (&lt;a href="https://issues.jboss.org/browse/DBZ-20"&gt;DBZ-20&lt;/a&gt;).
      This will be based on the Oracle XStream API in the first iteration and not support snapshots yet.
      But we felt it’d make sense to roll out this connector incrementally, so to get out the new feature early on and collect feedback on it.
      We’ve also planned to explore alternatives to using the XStream API in future releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Another great new feature will be &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; support (&lt;a href="https://issues.jboss.org/browse/DBZ-566"&gt;DBZ-566&lt;/a&gt;).
      Based on top of the existing &lt;a href="http://debezium.io/docs/embedded/"&gt;embedded mode&lt;/a&gt;,
      this will make it very easy to consume change data events using Reactive Streams implementations such as RxJava 2, the Java 9 Flow API and many more.
      It’ll also be very useful to consume change events in reactive frameworks such as Vert.x.
      We’re really looking forward to shipping this feature and already have a pending &lt;a href="https://github.com/debezium/debezium/pull/458"&gt;pull request&lt;/a&gt; for it.
      If you like, take a look and let us know about your feedback!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Please also check out our &lt;a href="http://debezium.io/docs/roadmap"&gt;roadmap&lt;/a&gt; for the coming months of Debezium’s development.
      This is our current plan for the things we’ll work on,
      but it’s not cast in stone, so please tell us about your feature requests by sending a message to our Google group.
      We’re looking forward to your feedback!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="about_debezium"&gt;
      &lt;a class="anchor" href="#about_debezium"&gt;&lt;/a&gt;About Debezium&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Debezium is an open source distributed platform that turns your existing databases into event streams,
      so applications can see and respond almost instantly to each committed row-level change in the databases.
      Debezium is built on top of &lt;a href="http://kafka.apache.org/"&gt;Kafka&lt;/a&gt; and provides &lt;a href="http://kafka.apache.org/documentation.html#connect"&gt;Kafka Connect&lt;/a&gt; compatible connectors that monitor specific database management systems.
      Debezium records the history of data changes in Kafka logs, so your application can be stopped and restarted at any time and can easily consume all of the events it missed while it was not running,
      ensuring that all events are processed correctly and completely.
      Debezium is &lt;a href="http://debezium.io/license"&gt;open source&lt;/a&gt; under the &lt;a href="http://www.apache.org/licenses/LICENSE-2.0.html"&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="get_involved"&gt;
      &lt;a class="anchor" href="#get_involved"&gt;&lt;/a&gt;Get involved&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;We hope you find Debezium interesting and useful, and want to give it a try.
      Follow us on Twitter &lt;a href="https://twitter.com/debezium"&gt;@debezium&lt;/a&gt;, &lt;a href="https://gitter.im/debezium/user"&gt;chat with us on Gitter&lt;/a&gt;,
      or join our &lt;a href="https://groups.google.com/forum/#!forum/debezium"&gt;mailing list&lt;/a&gt; to talk with the community.
      All of the code is open source &lt;a href="https://github.com/debezium/"&gt;on GitHub&lt;/a&gt;,
      so build the code locally and help us improve ours existing connectors and add even more connectors.
      If you find problems or have ideas how we can improve Debezium, please let us know or &lt;a href="https://issues.jboss.org/projects/DBZ/issues/"&gt;log an issue&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>It’s my pleasure to announce the release of Debezium 0.7.4! Continuing the 0.7 release line, this new version brings several bug fixes and a handful of new features. We recommend this upgrade to all users. When upgrading from earlier versions, please check out the release notes of all versions between the one you’re currently on and 0.7.4 in order to learn about any steps potentially required for ...</atom:summary></atom:entry><atom:entry><atom:title>Accessing Infinispan inside Docker for Mac</atom:title><atom:link href="http://feedproxy.google.com/~r/Infinispan/~3/2m6ZMxcHt0k/accessing-infinispan-inside-docker-for.html"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="feed_name_infinispan"/><atom:updated>2018-03-06T06:00:06-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-accessing_infinispan_inside_docker_for_mac</atom:id><atom:published>2018-03-06T06:00:00-05:00</atom:published><atom:author><atom:name>Galder Zamarreño</atom:name></atom:author><atom:content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Connecting to Infinispan instances that run inside Docker for Mac using the Java Hot Rod client can be tricky. In this blog post we'll be analyzing what makes this environment tricky and how to get around the issue.&lt;br /&gt;&lt;br /&gt;The tricky thing about Docker for Mac is that internal container IP addresses are not accessible externally. This is a &lt;a href="https://github.com/docker/for-mac/issues/155"&gt;known issue&lt;/a&gt; and it can be hard to workaround it. In container orchestrators such as Openshift, you can use Routes to allow external access to the containers. However, if running vanilla Docker for Mac, the simplest option is to map ports over to the local machine.&lt;br /&gt;&lt;br /&gt;Why is this important? When someone connects using the Hot Rod protocol, the server returns the current topology to the client. When Infinispan runs inside of Docker, this topology by default contains internal IP addresses. Since those are not accessible externally in Docker for Mac, the client won't be able to connect.&lt;br /&gt;&lt;br /&gt;To workaround the issue, Infinispan server Hot Rod endpoint can be configured with external host/port combination, but doing this would require modifying the server's configuration. A simpler method to get around the issue is to configure the client's intelligence to be &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Basic&lt;/span&gt;. By doing this the server won't send topology updates nor will the client be able to locate where keys are located using hashing. This has a negative performance impact since all requests to Infinispan single server or server cluster would need to go over the same IP+port. However, for demo or sample applications on Mac environments, this is reasonable thing to do.&lt;br /&gt;&lt;br /&gt;So, how do we do all of this?&lt;br /&gt;&lt;br /&gt;First, start Infinispan server and map Hot Rod's default port 11222 to the local 11222 port:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;docker run -it -p 11222:11222 jboss/infinispan-server:9.2.0.Final&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Open your IDE and create a project with this dependencies:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/galderz/a106a6a3b31a8ffbe3a6e3f9a454f5e1.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Finally, create a class that connects to Infinispan and does a simple put/get sequence:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/galderz/0c719fb87e0e28a21fa0e38ddb40fdfa.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Galder&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/2m6ZMxcHt0k" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>Connecting to Infinispan instances that run inside Docker for Mac using the Java Hot Rod client can be tricky. In this blog post we'll be analyzing what makes this environment tricky and how to get around the issue. The tricky thing about Docker for Mac is that internal container IP addresses are not accessible externally. This is a known issue and it can be hard to workaround it. In container orc...</atom:summary></atom:entry><atom:entry><atom:title>A SWIG based framework to build Hotrod client prototype in your preferred language</atom:title><atom:link href="http://feedproxy.google.com/~r/Infinispan/~3/2OlAf3sgvLk/a-swig-based-framework-to-build-hotrod.html"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="feed_name_infinispan"/><atom:updated>2018-03-05T03:31:21-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-a_swig_based_framework_to_build_hotrod_client_prototype_in_your_preferred_language</atom:id><atom:published>2018-03-05T03:27:00-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">If your are working on a non Java/C++/C#/JS application and you need to interact with Infinispan via Hotrod you may be interested in the idea behind the HotSwig[1] project.&lt;br /&gt;&lt;br /&gt;Hotswig proposes a framework to build Hotrod client prototypes quickly and for a generic SWIG[2] supported language.&lt;br /&gt;As people familiar with C++ and C# Infinispan native clients know, SWIG plays a role in both the projects:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;is used to build the base of the C# client wrapping the C++ core with a C# layer;&lt;/li&gt;&lt;li&gt;is used in the C++ project to run (part of) the Java test suite against the client, in this way: a Java wrapper is built via SWIG to make the C++ client looks like its Java big brother so it can be tested with the Java test suite.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The main goal was to produce for a specific language an almost complete client reusing the C++ core features and the following workflow has been setup to do that:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the whole C++ interface is processed by SWIG. The resulting wrapper exposes almost all the C++ functions;&lt;/li&gt;&lt;li&gt;a user friendly adaptation layer is build on top of the SWIG result.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;This approach doesn't work for the HotSwig goal, mainly because the effort need by the second step is usually not-negligible and prevents the rapid development of prototype in a generic language.&lt;br /&gt;&lt;br /&gt;In the HotSwig approach, this limitation is removed moving the adaptation layer from the target language to the C++ side and then letting SWIG generate a ready to use client prototype. So the HotSwig workflow is the following:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;build an adaptation facade around the C++ core to make it SWIG friendly (do the adaptation work once for all on the C++ side);&lt;/li&gt;&lt;li&gt;explicitly define what we want in the produced SWIG wrapper (keep things simple excluding everything by default);&lt;/li&gt;&lt;li&gt;run SWIG to produce the client.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;At the moment HotSwig is just a proof of concept, but you can try to run it and produce a ready to work Infinispan client for the language you need. Examples are already provided for python, ruby and Octave, but HotSwig should work with all the SWIG supported languages. If you get it to run in your preferred programming language, please share your experience with us.&lt;br /&gt;&lt;br /&gt;I've listed here[3] some tasks for the roadmap, with the idea to test the flexibility of the framework trying to extend it in different directions. Maybe the idea is good and it can grow up from a PoC to something that can really help devs. You can add you ideas of course.&lt;br /&gt;&lt;br /&gt;So if you need to do math against your Infinispan data set why don't you try the Octave client? Or maybe you want to do analytics with R, or presentation with PHP. Or you just like parenthesis and you want to use Lisp. Or you're working for the Klingon empire and you must use ylDoghQo'[4]... well ok just joking now...&lt;br /&gt;&lt;br /&gt;Thanks for reading!&lt;br /&gt;&lt;br /&gt;Cheers&lt;br /&gt;The Infinispan Team&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="https://github.com/rigazilla/hotswig"&gt;https://github.com/rigazilla/hotswig&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="http://www.swig.org/"&gt;http://www.swig.org/&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="https://github.com/rigazilla/hotswig/issues"&gt;https://github.com/rigazilla/hotswig/issues&lt;/a&gt;&lt;br /&gt;[4] &lt;a href="https://www.kli.org/about-klingon/klingon-phrases"&gt;https://www.kli.org/about-klingon/klingon-phrases&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/2OlAf3sgvLk" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>If your are working on a non Java/C++/C#/JS application and you need to interact with Infinispan via Hotrod you may be interested in the idea behind the HotSwig[1] project. Hotswig proposes a framework to build Hotrod client prototypes quickly and for a generic SWIG[2] supported language. As people familiar with C++ and C# Infinispan native clients know, SWIG plays a role in both the projects: is ...</atom:summary></atom:entry><atom:entry><atom:title>Manipulating KeyStores using the CLI in WildFly 12</atom:title><atom:link href="https://developer.jboss.org/people/fjuma/blog/2018/03/02/manipulating-keystores-using-the-cli-in-wildfly-12"/><atom:category scheme="searchisko:content:tags" term="cli"/><atom:category scheme="searchisko:content:tags" term="Elytron"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_aggregated"/><atom:category scheme="searchisko:content:tags" term="feed_name_fjuma"/><atom:category scheme="searchisko:content:tags" term="keystore"/><atom:category scheme="searchisko:content:tags" term="ssl"/><atom:category scheme="searchisko:content:tags" term="wildfly"/><atom:updated>2018-03-02T17:41:28-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-manipulating_keystores_using_the_cli_in_wildfly_12</atom:id><atom:published>2018-03-02T17:41:28-05:00</atom:published><atom:author><atom:name>Farah Juma</atom:name></atom:author><atom:content type="html">&lt;!-- [DocumentBodyStart:7a5bde03-2739-428c-ae86-da4c20ad070f] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;With WildFly 12, it is now possible to perform various KeyStore manipulation operations on a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; resource in the Elytron subsystem using the JBoss CLI. In particular, the new operations make it possible to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Generate a key pair&lt;/li&gt;&lt;li&gt;Generate a certificate signing request (CSR)&lt;/li&gt;&lt;li&gt;Import a certificate or a certificate chain from a file&lt;/li&gt;&lt;li&gt;Export a certificate to a file&lt;/li&gt;&lt;li&gt;Change an existing alias&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;With these new operations, it is now possible to set up one-way and two-way SSL for applications and management interfaces using only the CLI - going back and forth between the CLI and keytool is no longer necessary. This blog post is going to give an overview of these new operations.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start the server, use the following command:&lt;/p&gt;&lt;!--[CodeBlockStart:d44ced24-319c-4595-b6d2-b19cdadb3b6d][excluded]--&gt;&lt;pre class="java" name="code"&gt;$WILDFLY_HOME/bin/standalone.sh&amp;#160; &lt;/pre&gt;&lt;!--[CodeBlockEnd:d44ced24-319c-4595-b6d2-b19cdadb3b6d]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To connect to the running server to execute CLI commands, use:&lt;/p&gt;&lt;!--[CodeBlockStart:032276fb-42e7-4b42-a6b5-3a94dc2cd870][excluded]--&gt;&lt;pre class="java" name="code"&gt;$WILDFLY_HOME/bin/jboss-cli.sh --connect&lt;/pre&gt;&lt;!--[CodeBlockEnd:032276fb-42e7-4b42-a6b5-3a94dc2cd870]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Prerequisite configuration&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, configure a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; in the Elytron subsystem. Note that the path to the keystore file doesn&amp;#8217;t actually have to exist yet.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:b98456b5-939f-4f8f-8ce0-d080fc12d60e][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:add(path=server.keystore.jks, relative-to=jboss.server.config.dir, credential-reference={clear-text=secret}, type=JKS)&lt;/pre&gt;&lt;!--[CodeBlockEnd:b98456b5-939f-4f8f-8ce0-d080fc12d60e]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Generating a key pair&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;generate-key-pair&lt;/span&gt; command generates a key pair and wraps the resulting public key in a self-signed X.509 certificate. The generated private key and self-signed certificate will be added to a new PrivateKeyEntry in the KeyStore.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2948d636-b990-4695-8738-9c55bbf8a091][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:generate-key-pair(alias=example, algorithm=RSA, key-size=1024, validity=365, credential-reference={clear-text=secret}, distinguished-name="CN=www.example.com")&lt;/pre&gt;&lt;!--[CodeBlockEnd:2948d636-b990-4695-8738-9c55bbf8a091]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After performing the above command, you can check the alias names in the KeyStore and confirm the new alias, "example", is listed:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2266096c-9088-4213-b14d-1474e12c67b8][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:read-aliases()&amp;#160; 
{&amp;#160; 
&amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success",&amp;#160; 
&amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; ["example"]&amp;#160; 
}&amp;#160; &lt;/pre&gt;&lt;!--[CodeBlockEnd:2266096c-9088-4213-b14d-1474e12c67b8]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Generating a certificate signing request (CSR)&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;generate-certificate-signing-request&lt;/span&gt; command generates a PKCS #10 CSR using a PrivateKeyEntry from the KeyStore. The generated CSR will be output to a file (in the example below, the CSR is output to server.csr).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:562a7878-6c96-40e7-aeac-a848ad87af14][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:generate-certificate-signing-request(alias=example, path=server.csr, relative-to=jboss.server.config.dir, distinguished-name="CN=www.example.com", \
extensions=[{critical=false, name=KeyUsage,value=digitalSignature}], credential-reference={clear-text=secret}) &lt;/pre&gt;&lt;!--[CodeBlockEnd:562a7878-6c96-40e7-aeac-a848ad87af14]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Notice that in the above command, &lt;span style="font-family: 'courier new', courier;"&gt;alias=example&lt;/span&gt; refers to the PrivateKeyEntry that was created using the &lt;span style="font-family: 'courier new', courier;"&gt;generate-key-pair&lt;/span&gt; command.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Importing a certificate or certificate chain from a file&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;import-certificate&lt;/span&gt; command imports a certificate or certificate chain from a file into an entry in the KeyStore. This can be used to either import a trusted certificate or to import a certificate reply that&amp;#8217;s received after submitting a CSR to a certificate authority.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:db2407dc-fe5a-4925-bab9-a376b0896bcd][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:import-certificate(alias=example, path=/path/to/certificate/chain/file, relative-to=jboss.server.config.dir, credential-reference={clear-text=secret}, trust-cacerts=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:db2407dc-fe5a-4925-bab9-a376b0896bcd]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Exporting a certificate to a file&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;export-certificate&lt;/span&gt; command exports a certificate from an entry in the KeyStore to a file (in the example below, the certificate is exported to serverCert.cer).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:80e6158b-c0a5-45f6-8a5e-13c09f9be969][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:export-certificate(alias=example, path=serverCert.cer, relative-to=jboss.server.config.dir, pem=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:80e6158b-c0a5-45f6-8a5e-13c09f9be969]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Changing an existing alias&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;change-alias&lt;/span&gt; command moves an existing KeyStore entry to a new alias.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:f22bc86f-7e79-4a07-9ee9-b4d88d620ec1][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:change-alias(alias=example, new-alias=new-example, credential-reference={clear-text=secret})&lt;/pre&gt;&lt;!--[CodeBlockEnd:f22bc86f-7e79-4a07-9ee9-b4d88d620ec1]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After performing the above command, you can check the alias names in the KeyStore and confirm the new alias name, "new-example", is listed:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:e2ed00ec-41d4-4555-9a52-03c4cfae0413][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:read-aliases()
{
&amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success",
&amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; ["new-example"]
}&lt;/pre&gt;&lt;!--[CodeBlockEnd:e2ed00ec-41d4-4555-9a52-03c4cfae0413]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Storing changes&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; command persists any changes that you have made using the above commands to the file that backs the KeyStore.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:563e6188-0566-4e4f-a354-a345494d83b6][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=exampleKS:store()&lt;/pre&gt;&lt;!--[CodeBlockEnd:563e6188-0566-4e4f-a354-a345494d83b6]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;This blog post has given an overview of the new KeyStore manipulation operations that are available via the CLI in WildFly 12. For information on how to set up one-way and two-way SSL for applications and management interfaces, check out the &lt;a class="jive-link-external-small" href="http://docs.wildfly.org/WildFly_Elytron_Security.html#configure-ssltls" rel="nofollow"&gt;Elytron documentation&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:7a5bde03-2739-428c-ae86-da4c20ad070f] --&gt;</atom:content><atom:summary>With WildFly 12, it is now possible to perform various KeyStore manipulation operations on a key-store resource in the Elytron subsystem using the JBoss CLI. In particular, the new operations make it possible to: Generate a key pair Generate a certificate signing request (CSR) Import a certificate or a certificate chain from a file Export a certificate to a file Change an existing alias   With the...</atom:summary></atom:entry><atom:entry><atom:title>This Week in JBoss (1st March 2018): WildFly 12 is here!</atom:title><atom:link href="https://developer.jboss.org/blogs/weekly-editorial/2018/03/02/this-week-in-jboss-1st-march-2018-wildfly-12-is-here"/><atom:category scheme="searchisko:content:tags" term="arquillian"/><atom:category scheme="searchisko:content:tags" term="Bean Validation"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_global"/><atom:category scheme="searchisko:content:tags" term="feed_name_weeklyeditorial"/><atom:category scheme="searchisko:content:tags" term="FUSE"/><atom:category scheme="searchisko:content:tags" term="Hibernate"/><atom:category scheme="searchisko:content:tags" term="infinispan"/><atom:category scheme="searchisko:content:tags" term="istio"/><atom:category scheme="searchisko:content:tags" term="jakarta ee"/><atom:category scheme="searchisko:content:tags" term="Java EE"/><atom:category scheme="searchisko:content:tags" term="jBPM"/><atom:category scheme="searchisko:content:tags" term="keycloak"/><atom:category scheme="searchisko:content:tags" term="Teiid"/><atom:category scheme="searchisko:content:tags" term="wildfly"/><atom:updated>2018-03-02T11:09:32-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_1st_march_2018_wildfly_12_is_here</atom:id><atom:published>2018-03-02T11:09:32-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;!-- [DocumentBodyStart:d353f204-7cf5-4019-b4db-052e3ccb4539] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;h2&gt;WildFly 12 is Here!&lt;/h2&gt;&lt;p&gt;This is WildFly's first release following our new quarterly delivery model. As part of this plan, we are delivering EE8 functionality in fully completed incremental chunks, as opposed to waiting for everything to finish in a big bang release. WildFly 12 makes significant progress on this front, adding support for the majority of the new standards. &lt;a class="jive-link-external-small" href="http://wildfly.org/news/2018/02/28/WildFly12-Final-Released/" rel="nofollow"&gt;Read on&lt;/a&gt; to find out more details.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;Java EE&lt;/em&gt; is now &lt;em&gt;Jakarta EE&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;As you may already know, Java EE recently found a new home at the Eclipse Foundation. Shortly after the move, the community voted on a new name and Jakarta EE was selected. &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/jakarta_ee_onward" rel="nofollow"&gt;Here's what Mark Little and David Blevins have to say about the rename&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;SLA Tracking in jBPM&lt;/h2&gt;&lt;p&gt;In &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/track_your_processes_and_activities_with_sla" rel="nofollow"&gt;this post&lt;/a&gt; Maciej Swiderski explains how to track your SLAs in jBPM 7.7. He also followed up this week with &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/react_to_sla_violations_in_cases" rel="nofollow"&gt;another post&lt;/a&gt; explaining how to react to SLA violations using jBPM 7.7.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Keycloak and Istio&lt;/h2&gt;&lt;p&gt;This week &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/keycloak_and_istio" rel="nofollow"&gt;S&amp;eacute;bastien Blanc explains&lt;/a&gt; how to combine Keycloak with Istio.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Bean Validation 2.0&lt;/h2&gt;&lt;p&gt;This week Gunnar Morling &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/bean_validation_2_0_what_s_in_it" rel="nofollow"&gt;posted two presentations&lt;/a&gt; that introduce you to what's new in the Bean Validation 2.0 specification. He also&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/putting_bean_validation_constraints_to_guava_s_multimap" rel="nofollow"&gt; followed up&lt;/a&gt; with a description of the most significant feature in Bean Validation 2.0 (JSR 380): the support for container element constraints.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/wildfly_12_final_is_now_available" rel="nofollow"&gt;WildFly 12 Final&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/red_hat_fuse_announcing_fuse_7_tech_preview_3_release" rel="nofollow"&gt;Fuse 7 Tech preview 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/teiid_10_1_1_released" rel="nofollow"&gt;Teiid 10.1.1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/arquillian_core_1_4_0_final_released" rel="nofollow"&gt;Arquillian Core 1.4.0.Final&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/arquillian_cube_extension_1_15_2_released" rel="nofollow"&gt;Arquillian Cube Extension 1.15.2&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/smart_testing_0_0_10_released" rel="nofollow"&gt;Arquillian Smart Testing 0.0.10&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/infinispan_9_2_0_final" rel="nofollow"&gt;Infinispan 9.2.0.Final&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/fourteenth_bug_fix_release_for_orm_5_2" rel="nofollow"&gt;Hibernate ORM 5.2.14&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:d353f204-7cf5-4019-b4db-052e3ccb4539] --&gt;</atom:content><atom:summary>WildFly 12 is Here! This is WildFly's first release following our new quarterly delivery model. As part of this plan, we are delivering EE8 functionality in fully completed incremental chunks, as opposed to waiting for everything to finish in a big bang release. WildFly 12 makes significant progress on this front, adding support for the majority of the new standards. Read on to find out more detai...</atom:summary></atom:entry><atom:entry><atom:title>Heavy training for upcoming Camel talks</atom:title><atom:link href="http://feedproxy.google.com/~r/ApacheCamel/~3/E1Q2fNUGzco/heavy-training-for-upcoming-camel-talks.html"/><atom:category scheme="searchisko:content:tags" term="apache camel"/><atom:category scheme="searchisko:content:tags" term="conference"/><atom:category scheme="searchisko:content:tags" term="devnation"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_fusesource"/><atom:category scheme="searchisko:content:tags" term="feed_name_clausibsen"/><atom:category scheme="searchisko:content:tags" term="FUSE"/><atom:category scheme="searchisko:content:tags" term="red hat"/><atom:category scheme="searchisko:content:tags" term="speaker"/><atom:updated>2018-03-02T08:37:09-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-heavy_training_for_upcoming_camel_talks</atom:id><atom:published>2018-03-02T08:37:00-05:00</atom:published><atom:author><atom:name>Claus Ibsen</atom:name></atom:author><atom:content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I am busy with fitness training to get into shape for a number of upcoming Camel talks I am doing the next 3 to 4 months.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-sM4tpLykqBc/WplKuFaZZiI/AAAAAAAABls/yWJVGkcD14kYPLxGuqPEWwj2SGvFph-jACEwYBhgL/s1600/IMG_5353.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1413" data-original-width="1600" height="282" src="https://1.bp.blogspot.com/-sM4tpLykqBc/WplKuFaZZiI/AAAAAAAABls/yWJVGkcD14kYPLxGuqPEWwj2SGvFph-jACEwYBhgL/s320/IMG_5353.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Yc3utvKDoGY/WplKSvbkLsI/AAAAAAAABlw/UnUX1wUmWsoEqimE1jSBYLiHO_iE0MAQgCEwYBhgL/s1600/IMG_5355.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="1200" height="320" src="https://1.bp.blogspot.com/-Yc3utvKDoGY/WplKSvbkLsI/AAAAAAAABlw/UnUX1wUmWsoEqimE1jSBYLiHO_iE0MAQgCEwYBhgL/s320/IMG_5355.jpg" width="240" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;I would like to give a big thank you to &lt;a href="https://twitter.com/oscerd2"&gt;Andrea Cosentino&lt;/a&gt; and &lt;a href="https://twitter.com/zregvart"&gt;Zoran Regvart&lt;/a&gt; for designing and creating these new awesome Apache Camel t-shirts.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&amp;nbsp;&lt;a href="https://4.bp.blogspot.com/-hi9ncfFfA6Q/WplK_bVX1AI/AAAAAAAABl0/NdWckTLTQ3kjUdwACpcT2rdhwYip4JfYwCLcBGAs/s1600/IMG_5358.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="894" height="320" src="https://4.bp.blogspot.com/-hi9ncfFfA6Q/WplK_bVX1AI/AAAAAAAABl0/NdWckTLTQ3kjUdwACpcT2rdhwYip4JfYwCLcBGAs/s320/IMG_5358.jpg" width="178" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;After the heavy training I went up for running in the cold and snowy weather here in Denmark.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;OS2 meeting in Copenhagen&lt;/b&gt;&lt;br /&gt;On next Thursday March 8th I am attending the Danish &lt;a href="https://os2.eu/begivenhed/moede-i-open-source-gruppe" target="_blank"&gt;OS2 meeting in Ballerup&lt;/a&gt;, Copenhagen, Denmark. Another Red Hat'er was supposed to give a talk at this event but he had to cancel, and we are not so many danish employees so they contacted me if I could go. So the audience have to endure my technical talk about Apache Camel microservices on Kubernetes.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;DevNation Live Webinar&lt;/b&gt;&lt;br /&gt;On Thursday March 15th I am doing a webinar hosted by Burr Sutter from Red Hat. The topic is Camel riders in the cloud.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Apache Camel has fundamentally changed the way enterprise Java™ developers think about system-to-system integration by making enterprise integration patterns (EIP) a simple declaration in a lightweight application wrapped and delivered as a single JAR.&lt;br /&gt;In this session, we’ll show you how to bring the best practices from the enterprise integration world together with Linux containers, running on top of Kubernetes/OpenShift, and deployed as microservices, which are both cloud-native and cloud-portable.&lt;/blockquote&gt;The webinar is free to attend and you can register form the &lt;a href="https://developers.redhat.com/devnationlive/" target="_blank"&gt;DevNation website&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;JPoint Moscow&lt;/b&gt;&lt;br /&gt;In the beginning of April I am traveling for my first time to Russia, Moscow to attend the &lt;a href="https://jpoint.ru/talks/2o549q9npuyuemkqmy4yo6/" target="_blank"&gt;JPoint conference&lt;/a&gt; and give a talk about developing Camel microservices on Kubernetes.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://jpoint.ru/talks/2o549q9npuyuemkqmy4yo6/" target="_blank"&gt;&lt;img border="0" data-original-height="247" data-original-width="497" height="198" src="https://2.bp.blogspot.com/-GdEwXk-uaGo/WplNTFP7UVI/AAAAAAAABmE/mWy7ITNZXtsCTnb0os8kL4eySLye8PZyACLcBGAs/s400/jpoint.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;I will take Mr Camel with me as he don't want to miss the opportunity to drink the great Russian Vodka. And hopefully we'll have Red Hat to sponsor a number of books so we can have giveaways or a book signing.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Red Hat Summit&lt;/b&gt;&lt;br /&gt;I will then go to San Francisco in the beginning of May to attend and speak at the &lt;a href="https://www.redhat.com/en/summit/2018" target="_blank"&gt;Red Hat Summit&lt;/a&gt;. I will give a Camel talk and then we are doing two workshops, one about Camel development with APIs and another about the new &lt;a href="https://www.redhat.com/en/explore/fuse-online" target="_blank"&gt;Fuse Online&lt;/a&gt; product (low-code integration platform).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;GR8Conf EU&lt;/b&gt;&lt;br /&gt;At the end of May I will be at the &lt;a href="http://gr8conf.eu/" target="_blank"&gt;gr8conf&lt;/a&gt; in Copenhagen, where I will give a Camel talk to the Groovy crowd.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Barcelona or Copenhagen in June&lt;/b&gt;&lt;br /&gt;And that is not all, the Fuse team is likely going to have a face to face meeting sometime in June so I have to let my calendar be open for that. But hopefully it will fall in place so I have time to submit a paper for the awesome conference in &lt;a href="http://www.jbcnconf.com/2018/" target="_blank"&gt;Barcelona&lt;/a&gt;. Unfortunately the &lt;a href="https://jdk.io/"&gt;JDK.IO&lt;/a&gt; conference in Copenhagen clashes at the same time, so I cannot be in two places at once. But lets see, maybe they are tired of hearing about Camel's. After all I have been 3 or 4 times at the Barcelona conference.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Hamburg running&lt;/b&gt;&lt;br /&gt;And I am going to Hamburg in end of April for my first marathon run. I will travel down there on Friday, so hopefully I can catch up with &lt;a href="https://twitter.com/bennetelli" target="_blank"&gt;Bennet Schulz&lt;/a&gt; whom works on the Camel IDEA plugin. The run is on Sunday.&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=E1Q2fNUGzco:uRyhKIpq8YQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=E1Q2fNUGzco:uRyhKIpq8YQ:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=E1Q2fNUGzco:uRyhKIpq8YQ:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=E1Q2fNUGzco:uRyhKIpq8YQ:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=E1Q2fNUGzco:uRyhKIpq8YQ:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=E1Q2fNUGzco:uRyhKIpq8YQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=E1Q2fNUGzco:uRyhKIpq8YQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/E1Q2fNUGzco" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>I am busy with fitness training to get into shape for a number of upcoming Camel talks I am doing the next 3 to 4 months. I would like to give a big thank you to Andrea Cosentino and Zoran Regvart for designing and creating these new awesome Apache Camel t-shirts.   After the heavy training I went up for running in the cold and snowy weather here in Denmark. OS2 meeting in Copenhagen On next Thurs...</atom:summary></atom:entry><atom:entry><atom:title>WildFly 12 Final is now available!</atom:title><atom:link href="http://wildfly.org/news/2018/02/28/WildFly12-Final-Released/"/><atom:category scheme="searchisko:content:tags" term="Announcement"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_jbossas"/><atom:category scheme="searchisko:content:tags" term="feed_name_wildfly"/><atom:category scheme="searchisko:content:tags" term="release"/><atom:updated>2018-03-01T01:29:49-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-wildfly_12_final_is_now_available</atom:id><atom:published>2018-03-01T00:00:00-05:00</atom:published><atom:author><atom:name>unknown</atom:name></atom:author><atom:content type="html">&lt;div id="preamble"&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;WildFly 12 Final is now available &lt;a href="http://wildfly.org/downloads"&gt;for download&lt;/a&gt;!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="_ee8_capabilities_new_release_model"&gt;EE8 Capabilities &amp;amp; New Release Model&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;This is our first release following our &lt;a href="http://lists.jboss.org/pipermail/wildfly-dev/2017-December/006250.html"&gt;new quarterly delivery model&lt;/a&gt;. As part of this plan, we are delivering EE8 functionality in fully completed incremental chunks, as opposed to waiting for everything to finish in a big bang reelase. WildFly 12 makes significant progress on this front, adding support for the majority of the new standards:&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class="tableblock frame-all grid-all spread"&gt;
      &lt;colgroup&gt;
      &lt;col style="width: 20%;" /&gt;
      &lt;col style="width: 20%;" /&gt;
      &lt;col style="width: 20%;" /&gt;
      &lt;col style="width: 20%;" /&gt;
      &lt;col style="width: 20%;" /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
      &lt;tr&gt;
      &lt;th class="tableblock halign-left valign-top"&gt;Name&lt;/th&gt;
      &lt;th class="tableblock halign-left valign-top"&gt;From Version&lt;/th&gt;
      &lt;th class="tableblock halign-left valign-top"&gt;From JSR&lt;/th&gt;
      &lt;th class="tableblock halign-left valign-top"&gt;To Version&lt;/th&gt;
      &lt;th class="tableblock halign-left valign-top"&gt;To JSR&lt;/th&gt;
      &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java Servlet&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;3.1&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-340&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;4.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=370"&gt;JSR-369&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Contexts and Dependency Injection for Java&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.2&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-346&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=365"&gt;JSR-365&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Bean Validation&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.1&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-349&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=380"&gt;JSR-380&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JavaServer Faces&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.2&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-344&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.3&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=372"&gt;JSR-372&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JavaMail&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.5&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-919&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.6&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=919"&gt;JSR-919&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for RESTFul Web Services&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-339&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.1&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=370"&gt;JSR-370&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for JSON Processing&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-353&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.1&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=374"&gt;JSR-374&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for JSON Binding&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.0&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=367"&gt;JSR-367&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Common Annotations for the Java Platform&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.2&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-250&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.3&lt;/p&gt;&lt;/td&gt;
      &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="http://download.oracle.com/otndocs/jcp/common_annotations-1_3-mrel3-spec/"&gt;JSR-250&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;By default WildFly 12 launches in EE7 mode. In order to use these new capabilities you have to enable EE8 preview mode. This can be accomplished by passing the &lt;code&gt;ee8.preview.mode&lt;/code&gt; property during startup:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="bash"&gt;./standalone.sh -Dee8.preview.mode=true&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;Alternatively, this can be achieved by launching the server using the new &lt;code&gt;standalone-ee8.xml&lt;/code&gt; configuration, which simply includes the property in the config.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="bash"&gt;./standalone.sh -c standalone-ee8.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The CLI can also be used to modify the existing configuration to add this property. For example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="listingblock"&gt;
      &lt;div class="content"&gt;
      &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="bash"&gt;embed-server --admin-only=true
      /system-property=ee8.preview.mode:add(value=true)
      stop-embedded-server&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="_other_notable_items"&gt;Other Notable Items&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="ulist"&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;WildFly 12 includes a new thread pooling strategy that reduces the number of threads active at any given time, which helps conserve system resources.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;MicroProfile REST Client 1.0 is now supported&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java 9 compatibilty has been improved&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;CLI scripts can now take advantage of loops with variables&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;WildFly Documentation is now in asciidoc, and part of the source tree&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="sect1"&gt;
      &lt;h2 id="_jira_release_notes"&gt;Jira Release Notes&lt;/h2&gt;
      &lt;div class="sectionbody"&gt;
      &lt;div class="paragraph"&gt;
      &lt;p&gt;The full list of issues resolved is available &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12336563"&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;</atom:content><atom:summary>WildFly 12 Final is now available for download! EE8 Capabilities &amp; New Release Model This is our first release following our new quarterly delivery model. As part of this plan, we are delivering EE8 functionality in fully completed incremental chunks, as opposed to waiting for everything to finish in a big bang reelase. WildFly 12 makes significant progress on this front, adding support for the ma...</atom:summary></atom:entry><atom:entry><atom:title>Infinispan 9.2.0.Final</atom:title><atom:link href="http://feedproxy.google.com/~r/Infinispan/~3/HnMIvB2HjP0/infinispan-920final.html"/><atom:category scheme="searchisko:content:tags" term="9.2"/><atom:category scheme="searchisko:content:tags" term="feed_group_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="feed_name_infinispan"/><atom:category scheme="searchisko:content:tags" term="release"/><atom:updated>2018-02-28T18:20:28-05:00</atom:updated><atom:id>searchisko:content:id:jbossorg_blog-infinispan_9_2_0_final</atom:id><atom:published>2018-02-28T18:20:00-05:00</atom:published><atom:author><atom:name>Tristan Tarrant</atom:name></atom:author><atom:content type="html">&lt;br /&gt;Infinispan 9.2.0.Final "Gaina" is out !&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Our three-month time-boxing for a minor release plan got a little bit skewed this time in order to accommodate for some additional overhauls. This also means that, for a minor release, this is much meatier than usual.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Core improvements&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Conflict resolution&lt;/b&gt;&lt;br /&gt;Automatic conflict resolution after a partition merge is now supported for all partition handling strategies and is enabled by default. Furthermore, it is now possible to deploy custom EntryMergePolicy implementations to the server&lt;/li&gt;&lt;li&gt;&lt;b&gt;Reactive streams-based distributed Iteration improvements&lt;/b&gt;&lt;br /&gt;Distributed iterator now uses less threads and allows for efficient parallel retrieval providing for improved throughput&lt;/li&gt;&lt;li&gt;&lt;b&gt;Biased reads for scattered caches&lt;/b&gt;&lt;br /&gt;Originator can read the ‘backup’ copy locally until the data gets overwritten again. Together with improved read performance this migrates data to nodes that use it.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Off-heap sizing&lt;/b&gt; &lt;br /&gt;Off-heap requires less overhead per entry and provides for more accurate sizing allowing you to maximize your memory used&lt;/li&gt;&lt;li&gt;&lt;b&gt;Exception based eviction&lt;/b&gt;A new "eviction" that instead of removing old entries prevents new entries being inserted (supported by all memory storage and eviction types)&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;API improvements&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Multimap caches&lt;/b&gt;&lt;br /&gt;Available for both Embedded and for Hot Rod, these maps which can store multiple values for the same key&lt;/li&gt;&lt;li&gt;&lt;b&gt;Clustered Counters&lt;/b&gt;&lt;br /&gt;Clustered counters are now available for Hot Rod and in non-clustered deployments.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Clustered Locks&lt;/b&gt;&lt;br /&gt;Available in embedded mode. They allow concurrent synchronization between nodes in the same cluster&lt;/li&gt;&lt;li&gt;&lt;b&gt;Wildcard configurations&lt;/b&gt;&lt;br /&gt;Implicitly use a predefined configuration for all caches whose name matches a wildcard. This is particularly useful when using Infinispan through an API which doesn't allow for additional configuration properties (such as JCache).&lt;/li&gt;&lt;li&gt;&lt;b&gt;Cluster-wide cache admin with optional persistence&lt;/b&gt;&lt;br /&gt;The CacheManager API has been enhanced with methods to create/destroy caches across a cluster, in both Embedded and Hot Rod scenarios (REST will come in 9.3). Optionally, configurations can be made persistent across restarts.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Cache Stream&lt;/b&gt;&lt;br /&gt;Overloaded collect() method to take Supplier so that collect() in clustered environments is more user-friendly. &lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Data Interoperability&lt;/h3&gt;&lt;br /&gt;Transcoding is a powerful new feature which allows for transparent conversion between a number of formats across different endpoints. For example, it is now possible to write ProtoBuf-encoded data through the Hot Rod endpoint and retrieve that same data as a JSON document through the REST endpoint and vice versa. Additionally, such data is also indexable and queryable.&lt;br /&gt;&lt;h3&gt;Indexing and Query&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;POJO queries over Hot Rod&lt;/b&gt;&lt;br /&gt;It is now possible to directly use Hibernate Search-annotated objects through JBoss Marshalling/Java serialization without the need for ProtoBuf over Hot Rod.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Broadcast queries&lt;/b&gt;&lt;br /&gt;Clustered queries have been unified with non-clustered queries under a single API, making their use transparent.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Infinispan Server&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Rebased on WildFly 11&lt;/b&gt;&lt;br /&gt;The server baseline has been updated to WildFly 11&lt;/li&gt;&lt;li&gt;&lt;b&gt;Async Hot Rod server&lt;/b&gt;&lt;br /&gt;The Hot Rod server now uses async ops, sparing CPU cycles from context-switching and reducing the latency.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Queries over REST&lt;/b&gt;&lt;br /&gt;The REST endpoint now supports running Ickle queries. This is fully integrated with the above-mentioned JSON support, so your results will be returned to you as JSON documents.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Netty Hot Rod Client&lt;/b&gt;&lt;br /&gt;The Hot Rod Java client network layer has been completely rewritten to use Netty, bringing true asynchronous calls and some performance benefits.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Management, monitoring and logging&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console support for counters&lt;/li&gt;&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Improved remote protocol access logging&lt;/li&gt;&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Jolokia is now integrated as a part of the server.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Infinispan on OpenShift&lt;/h3&gt;&lt;br /&gt;We have been doing a lot of work in making Infinispan a first-class citizen of OpenShift. Check out the OpenShift templates for more details.&lt;br /&gt;&lt;h3&gt;Integrations&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;JCache 1.1&lt;/b&gt;&lt;br /&gt;This release is now aligned with JCache 1.1.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Hibernate second-level cache provider&lt;/b&gt;&lt;br /&gt;Traditionally shipped by our friends on the Hibernate ORM team, this component has now changed ownership over to us. This release includes a provider for both Hibernate 5.1 and 5.2.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Azure cloud discovery&lt;/b&gt;Courtesy of JGroups' extras, we now support discovery in Azure.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;The codename&lt;/h3&gt;&lt;br /&gt;In the grand-old tradition of giving major and minor Infinispan releases a beer-themed codename, 9.2 is no exception.&lt;br /&gt;&lt;br /&gt;"&lt;i&gt;Gaina&lt;/i&gt;", which means "chicken" in the milanese dialect, also happens to be one of the great beers of the Birrificio Lambrate in Milan.&lt;br /&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Onwards to 9.3&lt;/h3&gt;&lt;br /&gt;We have already started working on our next release, 9.3 which should be with you at the end of May. This will continue the work to make Infinispan fully asynchronous inside out, reducing resource usage and increasing performance. We are also working on a new modular API which will improve usability, increase interoperability between embedded and remote scenarios and take advantage of reactive designs. Transactions should finally make their appearance in Hot Rod and security will be greatly enhanced, by taking advantages of the great work done by our friends over on the Elytron team. We have much more planned, so please consult our roadmap for details.&lt;br /&gt;&lt;h3&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3&gt;Download, learn and play&lt;/h3&gt;&lt;br /&gt;You will find downloads, documentation, tutorials, quickstarts and demos over on our website.&lt;br /&gt;&lt;br /&gt;Please let us know on our forum, on IRC, on our issue tracker if you have any issues with this release, if there is any feature you would like to see in the future, or just to chat.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/HnMIvB2HjP0" height="1" width="1" alt=""/&gt;</atom:content><atom:summary>Infinispan 9.2.0.Final "Gaina" is out ! Our three-month time-boxing for a minor release plan got a little bit skewed this time in order to accommodate for some additional overhauls. This also means that, for a minor release, this is much meatier than usual. Core improvements Conflict resolution Automatic conflict resolution after a partition merge is now supported for all partition handling strate...</atom:summary></atom:entry></atom:feed>